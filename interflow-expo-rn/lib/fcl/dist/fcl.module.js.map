{"version":3,"file":"fcl.module.js","sources":["../src/utils/getChainId.js","../src/default-config.js","../src/VERSION.js","../src/exec/utils/is.js","../src/exec/utils/normalize-args.js","../src/document/document.js","../src/normalizers/interaction-template/interaction-template.js","../src/interaction-template-utils/derive-cadence-by-network.js","../src/utils/index.js","../src/exec/utils/derive-dependencies.js","../src/exec/utils/prep-template-opts.js","../src/exec/utils/pre.js","../src/exec/query.js","../src/current-user/fetch-services.js","../src/current-user/merge-services.js","../src/normalizers/service/__vsn.js","../src/normalizers/service/authn.js","../src/normalizers/service/authz.js","../src/normalizers/service/pre-authz.js","../src/normalizers/service/frame.js","../src/normalizers/service/back-channel-rpc.js","../src/normalizers/service/open-id.js","../src/normalizers/service/user-signature.js","../src/normalizers/service/local-view.js","../src/normalizers/service/account-proof.js","../src/normalizers/service/authn-refresh.js","../src/normalizers/service/service.js","../src/current-user/build-user.js","../src/current-user/service-of-type.js","../src/current-user/exec-service/strategies/utils/service-endpoint.js","../src/current-user/exec-service/strategies/utils/fetch-service.js","../src/normalizers/service/polling-response.js","../src/current-user/exec-service/strategies/utils/poll.js","../src/current-user/exec-service/strategies/utils/render-frame.js","../src/current-user/exec-service/strategies/utils/render-pop.js","../src/current-user/exec-service/strategies/utils/render-tab.js","../src/current-user/exec-service/exec-local.js","../src/current-user/exec-service/strategies/http-post.js","../src/current-user/exec-service/strategies/utils/buildMessageHandler.js","../src/current-user/exec-service/strategies/utils/frame.js","../src/current-user/exec-service/strategies/iframe-rpc.js","../src/current-user/exec-service/strategies/utils/pop.js","../src/current-user/exec-service/strategies/pop-rpc.js","../src/current-user/exec-service/strategies/utils/tab.js","../src/current-user/exec-service/strategies/tab-rpc.js","../src/current-user/exec-service/strategies/utils/extension.js","../src/current-user/exec-service/strategies/ext-rpc.js","../src/current-user/exec-service/plugins.js","../src/current-user/exec-service/index.js","../src/normalizers/service/composite-signature.js","../src/discovery/utils.js","../src/discovery/services.js","../src/discovery/services/authn.js","../src/discovery/index.js","../src/current-user/index.js","../src/exec/mutate.js","../src/wallet-utils/on-message-from-fcl.js","../src/wallet-utils/send-msg-to-fcl.js","../src/wallet-utils/CompositeSignature.js","../src/wallet-utils/encode-account-proof.js","../src/wallet-utils/inject-ext-service.js","../src/app-utils/verify-signatures.js","../src/exec/verify.js","../src/serialize/index.js","../src/transaction/index.js","../src/events/index.js","../node_modules/sha3/sponge/permute/copy/index.js","../node_modules/sha3/sponge/permute/chi/index.js","../node_modules/sha3/sponge/permute/iota/round-constants/index.js","../node_modules/sha3/sponge/permute/iota/index.js","../node_modules/sha3/sponge/permute/rho-pi/pi-shuffles/index.js","../node_modules/sha3/sponge/permute/rho-pi/rho-offsets/index.js","../node_modules/sha3/sponge/permute/rho-pi/index.js","../node_modules/sha3/sponge/permute/theta/index.js","../node_modules/sha3/sponge/permute/index.js","../node_modules/sha3/sponge/index.js","../node_modules/sha3/index.js","../src/interaction-template-utils/utils/hash.js","../src/interaction-template-utils/generate-template-id.js","../src/interaction-template-utils/get-interaction-template-audits.js","../src/interaction-template-utils/utils/generate-import.js","../src/interaction-template-utils/utils/find-imports.js","../src/interaction-template-utils/generate-dependency-pin.js","../src/normalizers/interaction-template/interaction-template-interface.js","../src/interaction-template-utils/generate-template-interface-id.js","../src/interaction-template-utils/verify-dependency-pin-same-at-block.js","../src/interaction-template-utils/get-template-message.js","../src/interaction-template-utils/get-template-argument-message.js","../src/fcl.js"],"sourcesContent":["import * as sdk from \"@onflow/sdk\"\nimport {config} from \"@onflow/config\"\nimport {log} from \"@onflow/util-logger\"\nimport { invariant } from \"@onflow/util-invariant\"\n\nasync function getChainIdFromAccessNode() {\n  const response = await sdk.send([sdk.getNetworkParameters()]).then(sdk.decode)\n  return response.chainId\n}\n\n/**\n * Sets the default chain id to the chain id of the access node\n * \n * @returns {string} The chain id of the access node\n * \n * @example\n * // returns \"testnet\"\n * setChainIdDefault()\n */\nexport async function setChainIdDefault() {\n  const network = await getChainIdFromAccessNode()\n  config.put(\"flow.network.default\", network)\n  return network\n}\n\n/**\n * Gets the chain ID if its set, otherwise gets the chain ID from the access node\n * \n * @returns {string} The chain ID of the access node\n * \n * @throws {Error} If the chain ID is not found\n * \n * @example\n * // returns \"testnet\"\n * getChainId()\n */\nexport async function getChainId() {\n  let network = await config.get(\"flow.network.default\")\n\n  if (!network) {\n    network = await setChainIdDefault()\n\n    if (!network) {\n      network = await config.get(\"flow.network\")\n\n      if (network) {\n        log.deprecate({\n          pkg: \"FCL\",\n          subject:\n            'Using the \"flow.network\" configuration key for specifying the flow network',\n          message: \"Configuring flow.network is no longer required\",\n          transition:\n            \"https://github.com/onflow/flow-js-sdk/blob/master/packages/fcl/TRANSITIONS.md#0002-deprecate-flow.network-config-key\",\n        })\n      } else {\n        network = await config.get(\"env\")\n\n        if (network)\n          log.deprecate({\n            pkg: \"FCL\",\n            subject:\n              'Using the \"env\" configuration key for specifying the flow network',\n            message:\n              \"Configuring to specify flow network is no longer required\",\n            transition:\n              \"https://github.com/onflow/flow-js-sdk/blob/master/packages/fcl/TRANSITIONS.md#0001-deprecate-env-config-key\",\n          })\n      }\n    }\n  }\n\n  invariant(\n    network,\n    \"Error getting chainId from access node. Please configure flow.network instead\"\n  )\n\n  return network\n}\n","import {config} from \"@onflow/config\"\nimport {setChainIdDefault} from \"./utils/getChainId\"\n\nconst isServerSide = () => typeof window === \"undefined\"\n\nconst SESSION_STORAGE = {\n  can: !isServerSide(),\n  // get: async key => JSON.parse(sessionStorage.getItem(key)),\n  // put: async (key, value) => sessionStorage.setItem(key, JSON.stringify(value)),\n  get: async key => console.log('get called', key),\n  put: async (key, value) => console.log('put called', key, value),\n}\n\nconfig({\n  \"discovery.wallet.method.default\": \"IFRAME/RPC\",\n  \"fcl.storage.default\": SESSION_STORAGE,\n})\n\n// this is an async function but we can't await bc it's run at top level.\n// NOT guaranteed that flow.network.default is set after this call (or at startup)\nsetChainIdDefault()\n\nexport async function configLens(regex) {\n  return Object.fromEntries(\n    Object.entries(await config().where(regex)).map(([key, value]) => [\n      key.replace(regex, \"\"),\n      value,\n    ])\n  )\n}\n","export const VERSION = PACKAGE_CURRENT_VERSION || \"TESTVERSION\"\n","const is = type => d => typeof d === type\n\nexport const isRequired = d => d != null\nexport const isObject = is(\"object\")\nexport const isString = is(\"string\")\nexport const isFunc = is(\"function\")\nexport const isNumber = is(\"number\")\n","import {isFunc} from \"./is\"\nimport * as sdk from \"@onflow/sdk\"\nimport * as t from \"@onflow/types\"\n\nexport function normalizeArgs(ax) {\n  if (isFunc(ax)) return ax(sdk.arg, t)\n  return []\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport fetchTransport from \"node-fetch\"\nimport {config} from \"@onflow/config\"\n\nasync function httpDocumentResolver({url}) {\n  invariant(\n    typeof url !== \"undefined\",\n    \"retrieve({ url }) -- url must be defined\"\n  )\n\n  let res\n  try {\n    res = await fetchTransport(url)\n  } catch (e) {\n    throw new Error(\"httpDocumentResolver Error: Failed to retrieve document.\")\n  }\n\n  let document = res.ok ? await res.json() : null\n\n  return document\n}\n\nconst DOCUMENT_RESOLVERS = new Map([\n  [\"http\", httpDocumentResolver],\n  [\"https\", httpDocumentResolver],\n])\n\nexport async function retrieve({url}) {\n  invariant(\n    typeof url !== \"undefined\",\n    \"retrieve({ url }) -- url must be defined\"\n  )\n  invariant(\n    typeof url === \"string\",\n    \"retrieve({ url }) -- url must be a string\"\n  )\n\n  const documentResolversFromConfig = await config().where(\n    /^document\\.resolver\\./\n  )\n  Object.keys(documentResolversFromConfig).map(key => {\n    const resolverFromConfig = documentResolversFromConfig[key]\n    const resolverProtocol = key.replace(/^document\\.resolver\\./, \"\")\n    DOCUMENT_RESOLVERS.set(resolverProtocol, resolverFromConfig)\n  })\n\n  const urlParts = /^(.*):\\/\\/([A-Za-z0-9\\-\\.]+)(:[0-9]+)?(.*)$/.exec(url)\n  invariant(urlParts, \"Failed to parse URL\")\n  const protocol = urlParts[1]\n  invariant(urlParts, \"Failed to parse URL protocol\")\n\n  const resolver = DOCUMENT_RESOLVERS.get(protocol)\n  invariant(resolver, `No resolver found for protcol=${protocol}`)\n\n  let document = await resolver({url})\n\n  return document\n}\n","export function normalizeInteractionTemplate(template) {\n  if (template == null) return null\n\n  switch (template[\"f_version\"]) {\n    case \"1.0.0\":\n      return template\n\n    default:\n      throw new Error(\n        \"normalizeInteractionTemplate Error: Invalid InteractionTemplate\"\n      )\n  }\n}\n","import {invariant} from \"@onflow/sdk\"\nimport {normalizeInteractionTemplate} from \"../normalizers/interaction-template/interaction-template\"\n\nexport function deriveCadenceByNetwork({network, template}) {\n  invariant(\n    network != undefined,\n    \"deriveCadenceByNetwork({ network }) -- network must be defined\"\n  )\n  invariant(\n    typeof network === \"string\",\n    \"deriveCadenceByNetwork({ network }) -- network must be a string\"\n  )\n\n  invariant(\n    template != undefined,\n    \"generateDependencyPin({ template }) -- template must be defined\"\n  )\n  invariant(\n    typeof template === \"object\",\n    \"generateDependencyPin({ template }) -- template must be an object\"\n  )\n  invariant(\n    template.f_type === \"InteractionTemplate\",\n    \"generateDependencyPin({ template }) -- template must be an InteractionTemplate\"\n  )\n\n  template = normalizeInteractionTemplate(template)\n\n  switch (template.f_version) {\n    case \"1.0.0\":\n      let networkDependencies = Object.keys(template?.data?.dependencies).map(\n        dependencyPlaceholder => {\n          let dependencyNetworkContracts = Object.values(\n            template?.data?.dependencies?.[dependencyPlaceholder]\n          )\n\n          invariant(\n            dependencyNetworkContracts,\n            `deriveCadenceByNetwork -- Could not find contracts for dependency placeholder: ${dependencyPlaceholder}`\n          )\n\n          invariant(\n            dependencyNetworkContracts.length === 0,\n            `deriveCadenceByNetwork -- Could not find contracts for dependency placeholder: ${dependencyPlaceholder}`\n          )\n\n          let dependencyContract = dependencyNetworkContracts[0]\n          let dependencyContractForNetwork = dependencyContract?.[network]\n\n          invariant(\n            dependencyContractForNetwork,\n            `deriveCadenceByNetwork -- Could not find ${network} network information for dependency: ${dependencyPlaceholder}`\n          )\n\n          return [dependencyPlaceholder, dependencyContractForNetwork.address]\n        }\n      )\n\n      return networkDependencies.reduce((cadence, [placeholder, address]) => {\n        const regex = new RegExp(\"(\\\\b\" + placeholder + \"\\\\b)\", \"g\")\n        return cadence.replace(regex, address)\n      }, template.data.cadence)\n\n    default:\n      throw new Error(\n        \"deriveCadenceByNetwork Error: Unsupported template version\"\n      )\n  }\n}\n","export {getChainId} from \"./getChainId\"\n\nexport function isAndroid() {\n  return (\n    typeof navigator !== \"undefined\" && /android/i.test(navigator.userAgent)\n  )\n}\n\nexport function isSmallIOS() {\n  return (\n    typeof navigator !== \"undefined\" && /iPhone|iPod/.test(navigator.userAgent)\n  )\n}\n\nexport function isLargeIOS() {\n  return typeof navigator !== \"undefined\" && /iPad/.test(navigator.userAgent)\n}\n\nexport function isIOS() {\n  return isSmallIOS() || isLargeIOS()\n}\n\nexport function isMobile() {\n  return isAndroid() || isIOS()\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {withPrefix} from \"@onflow/util-address\"\nimport {getChainId} from \"../../utils\"\n\nexport async function deriveDependencies({template}) {\n  const network = await getChainId()\n\n  invariant(\n    network,\n    \"FCL configureDependencies Error: Missing configuration value for 'flow.network'\"\n  )\n\n  const derivedDependencies = {}\n\n  switch (template[\"f_version\"]) {\n    case \"1.0.0\":\n      const dependencyPlaceholderKeys = Object.keys(\n        template?.data?.dependencies\n      )\n      for (let dependencyPlaceholderKey of dependencyPlaceholderKeys) {\n        let dependencyPlaceholder =\n          template?.data?.dependencies[dependencyPlaceholderKey]\n\n        const dependencyPlaceholderContractsKeys = Object.keys(\n          dependencyPlaceholder\n        )\n        invariant(\n          dependencyPlaceholderContractsKeys.length > 0,\n          `FCL configureDependencies Error: No contracts found in template for placeholder=${dependencyPlaceholderKey}`\n        )\n        const dependencyPlaceholderContract =\n          dependencyPlaceholder[dependencyPlaceholderContractsKeys[0]]\n        const dependency = dependencyPlaceholderContract[network]\n\n        invariant(\n          dependency,\n          `FCL configureDependencies Error: No dependency information for placeholder=${dependencyPlaceholderKey} contract=${dependencyPlaceholderContractsKeys[0]} network=${network}`\n        )\n        invariant(\n          dependency?.address,\n          `FCL configureDependencies Error: No address information for placeholder=${dependencyPlaceholderKey} contract=${dependencyPlaceholderContractsKeys[0]} network=${network}`\n        )\n\n        derivedDependencies[dependencyPlaceholderKey] = withPrefix(\n          dependency?.address\n        )\n      }\n\n      return derivedDependencies\n\n    default:\n      throw new Error(\n        \"FCL configureDependencies Error: Unsupported template version\"\n      )\n  }\n}\n","import {retrieve} from \"../../document/document.js\"\nimport {normalizeInteractionTemplate} from \"../../normalizers/interaction-template/interaction-template\"\nimport {deriveCadenceByNetwork} from \"../../interaction-template-utils/derive-cadence-by-network.js\"\nimport {deriveDependencies} from \"./derive-dependencies\"\nimport {isString} from \"./is\"\nimport {getChainId} from \"../../utils\"\n\nexport async function prepTemplateOpts(opts) {\n  if (isString(opts?.template)) {\n    opts.template = await retrieve({url: opts?.template})\n  }\n\n  let dependencies = {}\n  if (opts?.template) {\n    opts.template = normalizeInteractionTemplate(opts?.template)\n    dependencies = await deriveDependencies({template: opts.template})\n  }\n\n  const cadence =\n    opts.cadence ||\n    deriveCadenceByNetwork({\n      template: opts.template,\n      network: await getChainId(),\n    })\n\n  opts.cadence = cadence\n  opts.dependencies = dependencies\n\n  return opts\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport * as sdk from \"@onflow/sdk\"\nimport {isRequired, isObject, isString} from \"./is\"\n\nasync function pre(type, opts) {\n  // prettier-ignore\n  invariant(isRequired(opts), `${type}(opts) -- opts is required`)\n  // prettier-ignore\n  invariant(isObject(opts), `${type}(opts) -- opts must be an object`)\n  // prettier-ignore\n  invariant(!(opts.cadence && opts.template), `${type}({ template, cadence }) -- cannot pass both cadence and template`)\n  // prettier-ignore\n  invariant(isRequired(opts.cadence || opts?.template), `${type}({ cadence }) -- cadence is required`)\n  // // prettier-ignore\n  invariant(\n    isString(opts.cadence) || opts?.template,\n    `${type}({ cadence }) -- cadence must be a string`\n  )\n  // prettier-ignore\n  invariant(\n    opts.cadence || (await sdk.config().get(\"flow.network\")),\n    `${type}(opts) -- Required value for \"flow.network\" not defined in config. See: ${\"https://github.com/onflow/flow-js-sdk/blob/master/packages/fcl/src/exec/query.md#configuration\"}`\n  )\n  // prettier-ignore\n  invariant(\n    await sdk.config().get(\"accessNode.api\"),\n    `${type}(opts) -- Required value for \"accessNode.api\" not defined in config. See: ${\"https://github.com/onflow/flow-js-sdk/blob/master/packages/fcl/src/exec/query.md#configuration\"}`\n  )\n}\n\nexport async function preMutate(opts) {\n  return pre(\"mutate\", opts)\n}\n\nexport async function preQuery(opts) {\n  return pre(\"query\", opts)\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport * as sdk from \"@onflow/sdk\"\nimport {isRequired, isObject, isString} from \"./utils/is\"\nimport {normalizeArgs} from \"./utils/normalize-args\"\nimport {prepTemplateOpts} from \"./utils/prep-template-opts.js\"\nimport {preQuery} from \"./utils/pre.js\"\n\n/** Query the Flow Blockchain\n *\n *  @arg {Object} opts         - Query Options and configuration\n *  @arg {string} opts.cadence - Cadence Script used to query Flow\n *  @arg {ArgsFn} opts.args    - Arguments passed to cadence script\n *  @arg {Object} opts.template - Interaction Template for a script\n *  @arg {number} opts.limit   - Compute Limit for Query\n *  @returns {Promise<Response>}\n *\n *  Where:\n *    @callback ArgsFn\n *    @arg {ArgFn}  arg - Argument function to define a single argument\n *    @arg {Object} t   - Cadence Types object used to define the type\n *    @returns {args[]}\n *\n *    @callback ArgFn\n *    @arg {Any}  value - the value of the argument\n *    @arg {Type} type  - the cadence type of the value\n *    @returns {arg}\n *\n *  Example:\n *    const cadence = `\n *      cadence: `\n *        pub fun main(a: Int, b: Int, c: Address): Int {\n *          log(c)\n *          return a + b\n *        }\n *    `.trim()\n *\n *    const args = (arg, t) => [\n *      arg(5, t.Int),\n *      arg(7, t.Int),\n *      arg(\"0xb2db43ad6bc345fec9\", t.Address),\n *    ]\n *\n *    await query({ cadence, args })\n */\nexport async function query(opts = {}) {\n  await preQuery(opts)\n  opts = await prepTemplateOpts(opts)\n\n  return sdk.config().overload(opts.dependencies || {}, async () =>\n    // prettier-ignore\n    sdk.send([\n      sdk.script(opts.cadence),\n      sdk.args(normalizeArgs(opts.args || [])),\n      opts.limit && typeof opts.limit === \"number\" && sdk.limit(opts.limit)\n    ]).then(sdk.decode)\n  )\n}\n","export async function fetchServices(servicesURL, code) {\n  if (servicesURL == null || code == null) return []\n\n  const url = new URL(servicesURL)\n  url.searchParams.append(\"code\", code)\n\n  const resp = await fetch(url, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  }).then(d => d.json())\n\n  if (Array.isArray(resp)) return resp\n\n  // Backwards compatibility for First-Gen Wallet Providers\n  const services = []\n\n  // Convert authorizations into authz services\n  if (Array.isArray(resp.authorizations)) {\n    for (let service of resp.authorizations) {\n      services.push({\n        type: \"authz\",\n        keyId: resp.keyId,\n        ...service,\n      })\n    }\n  }\n\n  // Convert Provider info into an authn service\n  if (resp.provider != null) {\n    services.push({\n      type: \"authn\",\n      id: \"wallet-provider#authn\",\n      ...resp.provider,\n    })\n  }\n\n  return services\n}\n","import {withPrefix} from \"@onflow/util-address\"\n\nexport function mergeServices(sx1 = [], sx2 = []) {\n  // TODO: Make this smarter\n  return [...sx1, ...sx2]\n}\n","export const SERVICE_PRAGMA = {\n  f_type: \"Service\",\n  f_vsn: \"1.0.0\",\n}\n\nexport const IDENTITY_PRAGMA = {\n  f_type: \"Identity\",\n  f_vsn: \"1.0.0\",\n}\n\nexport const PROVIDER_PRAGMA = {\n  f_type: \"Provider\",\n  f_vsn: \"1.0.0\",\n}\n\nexport const USER_PRAGMA = {\n  f_type: \"USER\",\n  f_vsn: \"1.0.0\",\n}\n\nexport const POLLING_RESPONSE_PRAGMA = {\n  f_type: \"PollingResponse\",\n  f_vsn: \"1.0.0\",\n}\n\nexport const COMPOSITE_SIGNATURE_PRAGMA = {\n  f_type: \"CompositeSignature\",\n  f_vsn: \"1.0.0\",\n}\n\nexport const OPEN_ID_PRAGMA = {\n  f_type: \"OpenId\",\n  f_vsn: \"1.0.0\",\n}\n","import {withPrefix} from \"@onflow/util-address\"\nimport {SERVICE_PRAGMA} from \"./__vsn\"\n\n// {\n//   \"f_type\": \"Service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"authn\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"endpoint\": \"https://rawr\",\n//   \"id\": \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", // wallets internal id for the user\n//   \"identity\": {\n//     \"address\": \"0x____\"\n//   },\n//   \"provider\": {\n//     \"address\": \"0x____\",\n//     \"name\": \"Best Wallet\",\n//     \"description\": \"The Best Wallet\"\n//     \"icon\": \"https://\",\n//   }\n// }\nexport function normalizeAuthn(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      return {\n        ...SERVICE_PRAGMA,\n        type: service.type,\n        uid: service.id,\n        endpoint: service.authn,\n        id: service.pid,\n        provider: {\n          address: withPrefix(service.addr),\n          name: service.name,\n          icon: service.icon,\n        },\n      }\n  }\n}\n","import {withPrefix} from \"@onflow/util-address\"\nimport {SERVICE_PRAGMA, IDENTITY_PRAGMA} from \"./__vsn\"\n\n// {\n//   \"f_type\": \"service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"authz\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"endpoint\": \"https://rawr\",\n//   \"method\": \"HTTP/POST\", // HTTP/POST | IFRAME/RPC | HTTP/RPC\n//   \"identity\": {\n//      \"address\": \"0x______\",\n//      \"keyId\": 0,\n//   },\n//   \"data\": {}, // included in body of authz request\n//   \"params\": {}, // included as query params on endpoint url\n// }\nexport function normalizeAuthz(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      return {\n        ...SERVICE_PRAGMA,\n        type: service.type,\n        uid: service.id,\n        endpoint: service.endpoint,\n        method: service.method,\n        identity: {\n          ...IDENTITY_PRAGMA,\n          address: withPrefix(service.addr),\n          keyId: service.keyId,\n        },\n        params: service.params,\n        data: service.data,\n      }\n  }\n}\n","import {withPrefix} from \"@onflow/util-address\"\nimport {SERVICE_PRAGMA, IDENTITY_PRAGMA} from \"./__vsn\"\n\n// {\n//   \"f_type\": \"service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"pre-authz\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"endpoint\": \"https://rawr\",\n//   \"method\": \"HTTP/POST\", // HTTP/POST | IFRAME/RPC | HTTP/RPC\n//   \"identity\": {\n//      \"address\": \"0x______\",\n//      \"keyId\": 0,\n//   },\n//   \"data\": {}, // included in body of pre-authz request\n//   \"params\": {}, // included as query params on endpoint url\n// }\nexport function normalizePreAuthz(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      return {\n        ...SERVICE_PRAGMA,\n        type: service.type,\n        uid: service.id,\n        endpoint: service.endpoint,\n        method: service.method,\n        identity: {\n          ...IDENTITY_PRAGMA,\n          address: withPrefix(service.addr),\n          keyId: service.keyId,\n        },\n        params: service.params,\n        data: service.data,\n      }\n  }\n}\n","import {SERVICE_PRAGMA} from \"./__vsn\"\n\n// {\n//    \"f_type\": \"Service\",\n//    \"f_vsn\": \"1.0.0\",\n//    \"type\": \"frame\",\n//    \"endpoint\": \"https://rawr\",\n//    \"data\": {},   // Sent to frame when ready\n//    \"params\": {}, // include in query params on frame\n// }\nexport function normalizeFrame(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      return {\n        old: service,\n        ...SERVICE_PRAGMA,\n        type: \"frame\",\n        endpoint: service.endpoint,\n        params: service.params || {},\n        data: service.data || {},\n      }\n  }\n}\n","import {SERVICE_PRAGMA} from \"./__vsn\"\n\n// {\n//    \"f_type\": \"Service\",\n//    \"f_vsn\": \"1.0.0\",\n//    \"type\": \"back-channel-rpc\",\n//    \"endpoint\": \"https://rawr\",\n//    \"method\": \"HTTP/GET\", // HTTP/GET | HTTP/POST\n//    \"data\": {},           // included in body of rpc\n//    \"params\": {},         // included as query params on endpoint url\n// }\nexport function normalizeBackChannelRpc(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      return {\n        ...SERVICE_PRAGMA,\n        type: \"back-channel-rpc\",\n        endpoint: service.endpoint,\n        method: service.method,\n        params: service.params || {},\n        data: service.data || {},\n      }\n  }\n}\n","import {SERVICE_PRAGMA, OPEN_ID_PRAGMA} from \"./__vsn\"\n\n// {\n//   \"f_type\": \"Service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"open-id\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"method: \"data\",\n//   \"data\": {\n//      \"profile\": {\n//        \"name\": \"Bob\",\n//        \"family_name\": \"Builder\",\n//        \"given_name\": \"Robert\",\n//        \"middle_name\": \"the\",\n//        \"nickname\": \"Bob the Builder\",\n//        \"perferred_username\": \"bob\",\n//        \"profile\": \"https://www.bobthebuilder.com/\",\n//        \"picture\": \"https://avatars.onflow.org/avatar/bob\",\n//        \"gender\": \"...\",\n//        \"birthday\": \"2001-01-18\",\n//        \"zoneinfo\": \"America/Vancouver\",\n//        \"locale\": \"en-us\",\n//        \"updated_at\": \"1614970797388\"\n//      },\n//      \"email\": {\n//        \"email\": \"bob@bob.bob\",\n//        \"email_verified\": true\n//      },\n//      \"address\": {\n//        \"address\": \"One Apple Park Way, Cupertino, CA 95014, USA\"\n//      },\n//      \"phone\": {\n//        \"phone_number\": \"+1 (xxx) yyy-zzzz\",\n//        \"phone_number_verified\": true\n//      },\n//      \"social\": {\n//        \"twitter\": \"@_qvvg\",\n//        \"twitter_verified\": true\n//      },\n//   }\n// }\nexport function normalizeOpenId(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      return null\n  }\n}\n","// {\n//   \"f_type\": \"Service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"user-signature\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"endpoint\": \"https://rawr\",\n//   \"method\": \"IFRAME/RPC\", // HTTP/POST | IFRAME/RPC | HTTP/RPC\n//   \"id\": \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", // wallets internal id for the user\n//   \"data\": {}, // included in body of user-signature request\n//   \"params\": {}, // included as query params on endpoint url\n// }\nexport function normalizeUserSignature(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      throw new Error(\"Invalid user-signature service\")\n  }\n}\n","import {SERVICE_PRAGMA} from \"./__vsn\"\n\n// {\n//    \"f_type\": \"Service\",\n//    \"f_vsn\": \"1.0.0\",\n//    type: \"local-view\",\n//    method: \"VIEW/IFRAME\",\n//    endpoint: \"https://woot.org/authz/local\",\n//    data: {},\n//    params: {},\n// }\nexport function normalizeLocalView(resp) {\n  if (resp == null) return null\n  if (resp.method == null) {\n    resp = {...resp, type: \"local-view\", method: \"VIEW/IFRAME\"}\n  }\n\n  switch (resp[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return resp\n\n    default:\n      return {\n        ...SERVICE_PRAGMA,\n        type: resp.type || \"local-view\",\n        method: resp.method,\n        endpoint: resp.endpoint,\n        data: resp.data || {},\n        params: resp.params || {},\n      }\n  }\n}\n","// {\n//   \"f_type\": \"Service\",                    // Its a service!\n//   \"f_vsn\": \"1.0.0\",                       // Follows the v1.0.0 spec for the service\n//   \"type\": \"account-proof\",                // the type of service it is\n//   \"method\": \"DATA\",                       // Its data!\n//   \"uid\": \"awesome-wallet#account-proof\",  // A unique identifier for the service\n//   \"data\": {\n//     \"f_type\": \"account-proof\",\n//     \"f_vsn\": \"1.0.0\",\n//     \"nonce\": \"0A1BC2FF\",                  // Nonce signed by the current account-proof (minimum 32 bytes in total, i.e 64 hex characters)\n//     \"address\": \"0xUSER\",                  // The user's address (8 bytes, i.e 16 hex characters)\n//     \"signature\": CompositeSignature,      // address (sans-prefix), keyId, signature (hex)\n// }\n\nexport function normalizeAccountProof(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      throw new Error(`FCL Normalizer Error: Invalid account-proof service`)\n  }\n}\n","// {\n//   \"f_type\": \"Service\",\n//   \"f_vsn\": \"1.0.0\",\n//   \"type\": \"authn-refresh\",\n//   \"uid\": \"uniqueDedupeKey\",\n//   \"endpoint\": \"https://rawr\",\n//   \"method\": \"HTTP/POST\",  // \"HTTP/POST\", // HTTP/POST | IFRAME/RPC | HTTP/RPC\n//   \"id\": \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\", // wallets internal id for the user\n//   \"data\": {}, // included in body of request\n//   \"params\": {}, // included as query params on endpoint url\n// }\nexport function normalizeAuthnRefresh(service) {\n  if (service == null) return null\n\n  switch (service[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return service\n\n    default:\n      throw new Error(\"Invalid authn-refresh service\")\n  }\n}\n","import {normalizeAuthn} from \"./authn\"\nimport {normalizeAuthz} from \"./authz\"\nimport {normalizePreAuthz} from \"./pre-authz\"\nimport {normalizeFrame} from \"./frame\"\nimport {normalizeBackChannelRpc} from \"./back-channel-rpc\"\nimport {normalizeOpenId} from \"./open-id\"\nimport {normalizeUserSignature} from \"./user-signature\"\nimport {normalizeLocalView} from \"./local-view\"\nimport {normalizeAccountProof} from \"./account-proof\"\nimport {normalizeAuthnRefresh} from \"./authn-refresh\"\n\nexport function normalizeServices(services, data) {\n  return services.map(service => normalizeService(service, data))\n}\n\nconst serviceNormalizers = {\n  \"back-channel-rpc\": normalizeBackChannelRpc,\n  \"pre-authz\": normalizePreAuthz,\n  authz: normalizeAuthz,\n  authn: normalizeAuthn,\n  frame: normalizeFrame,\n  \"open-id\": normalizeOpenId,\n  \"user-signature\": normalizeUserSignature,\n  \"local-view\": normalizeLocalView,\n  \"account-proof\": normalizeAccountProof,\n  \"authn-refresh\": normalizeAuthnRefresh,\n}\n\nexport function normalizeService(service, data) {\n  try {\n    var normalized = serviceNormalizers[service.type](service, data)\n    return normalized\n  } catch (error) {\n    console.error(\n      `Unrecognized FCL Service Type [${service.type}]`,\n      service,\n      error\n    )\n    return service\n  }\n}\n","import {withPrefix} from \"@onflow/util-address\"\nimport * as rlp from \"@onflow/rlp\"\nimport {fetchServices} from \"./fetch-services\"\nimport {mergeServices} from \"./merge-services\"\nimport {USER_PRAGMA} from \"../normalizers/service/__vsn\"\nimport {normalizeService} from \"../normalizers/service/service\"\n\nfunction deriveCompositeId(authn) {\n  return rlp\n    .encode([\n      authn.provider.address || authn.provider.name || \"UNSPECIFIED\",\n      authn.id,\n    ])\n    .toString(\"hex\")\n}\n\nfunction normalizeData(data) {\n  data.addr = data.addr ? withPrefix(data.addr) : null\n  data.paddr = data.paddr ? withPrefix(data.paddr) : null\n  return data\n}\n\nfunction findService(type, services) {\n  return services.find(d => d.type === type)\n}\n\nexport async function buildUser(data) {\n  data = normalizeData(data)\n\n  var services = mergeServices(\n    data.services || [],\n    await fetchServices(data.hks, data.code)\n  ).map(service => normalizeService(service, data))\n\n  const authn = findService(\"authn\", services)\n\n  return {\n    ...USER_PRAGMA,\n    addr: withPrefix(data.addr),\n    cid: deriveCompositeId(authn),\n    loggedIn: true,\n    services: services,\n    expiresAt: data.expires,\n  }\n}\n","export function serviceOfType(services = [], type) {\n  return services.find(service => service.type === type)\n}\n","export function serviceEndpoint(service) {\n  const url = new URL(service.endpoint)\n  url.searchParams.append(\"l6n\", window.location.origin)\n  if (service.params != null) {\n    for (let [key, value] of Object.entries(service.params || {})) {\n      url.searchParams.append(key, value)\n    }\n  }\n  return url\n}\n","import {serviceEndpoint} from \"./service-endpoint\"\n\nexport function fetchService(service, opts = {}) {\n  const method = opts.method || \"POST\"\n  const body =\n    method === \"GET\"\n      ? undefined\n      : JSON.stringify(opts.data || service.data || {})\n\n  return fetch(serviceEndpoint(service), {\n    method: method,\n    headers: {\n      ...(service.headers || {}),\n      ...(opts.headers || {}),\n      \"Content-Type\": \"application/json\",\n    },\n    body: body,\n  }).then(d => d.json())\n}\n","import {POLLING_RESPONSE_PRAGMA} from \"./__vsn\"\nimport {normalizeBackChannelRpc} from \"./back-channel-rpc\"\nimport {normalizeFrame} from \"./frame\"\n\n// {\n//    \"f_type\": \"PollingResponse\",\n//    \"f_vsn\": \"1.0.0\",\n//    \"status\": \"PENDING\", // PENDING | APPROVED | DECLINED | REDIRECT\n//    \"reason\": null,      // Reason for Declining Transaction\n//    \"data\": null,        // Return value for APPROVED\n//    \"updates\": BackChannelRpc,\n//    \"local\": Frame,\n// }\nexport function normalizePollingResponse(resp) {\n  if (resp == null) return null\n\n  switch (resp[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return resp\n\n    default:\n      return {\n        ...POLLING_RESPONSE_PRAGMA,\n        status: resp.status ?? \"APPROVED\",\n        reason: resp.reason ?? null,\n        data: resp.compositeSignature || resp.data || {...resp} || {},\n        updates: normalizeBackChannelRpc(resp.authorizationUpdates),\n        local: normalizeFrame((resp.local || [])[0]),\n      }\n  }\n}\n","import {normalizePollingResponse} from \"../../../../normalizers/service/polling-response\"\nimport {serviceEndpoint} from \"./service-endpoint\"\nimport {invariant} from \"@onflow/util-invariant\"\nimport {fetchService} from \"./fetch-service\"\n\nconst OPTIONS = {\n  \"HTTP/GET\": \"GET\",\n  \"HTTP/POST\": \"POST\",\n}\n\nconst serviceMethod = service => {\n  invariant(\n    OPTIONS[service.method],\n    \"Invalid Service Method for type back-channel-rpc\",\n    {service}\n  )\n  return OPTIONS[service.method]\n}\n\nconst serviceBody = service => {\n  if (service.method === \"HTTP/GET\") return undefined\n  if (service.method === \"HTTP/POST\" && service.data != null)\n    return JSON.stringify(service.data)\n  return undefined\n}\n\nexport async function poll(service, canContinue = () => true) {\n  invariant(service, \"Missing Polling Service\", {service})\n  if (!canContinue()) throw new Error(\"Externally Halted\")\n\n  const resp = await fetchService(service, {\n    method: serviceMethod(service),\n  }).then(normalizePollingResponse)\n\n  switch (resp.status) {\n    case \"APPROVED\":\n      return resp.data\n    case \"DECLINED\":\n      throw new Error(`Declined: ${resp.reason || \"No reason supplied.\"}`)\n    default:\n      await new Promise(r => setTimeout(r, 500))\n      return poll(resp.updates, canContinue)\n  }\n}\n","import {invariant} from \"@onflow/util-invariant\"\n\nconst FRAME = \"FCL_IFRAME\"\n\nconst FRAME_STYLES = `\n  position:fixed;\n  top: 0px;\n  right: 0px;\n  bottom: 0px;\n  left: 0px;\n  height: 100%;\n  width: 100vw;\n  display:block;\n  background:rgba(0,0,0,0.25);\n  z-index: 2147483647;\n  box-sizing: border-box;\n  color-scheme: light;\n`\n\nexport function renderFrame(src) {\n  invariant(\n    !document.getElementById(FRAME),\n    \"Attempt at triggering multiple Frames\",\n    {src}\n  )\n\n  const $frame = document.createElement(\"iframe\")\n  $frame.src = src\n  $frame.id = FRAME\n  $frame.allow = \"usb *; hid *\"\n  $frame.frameBorder = \"0\"\n  $frame.style.cssText = FRAME_STYLES\n  document.body.append($frame)\n\n  const unmount = () => {\n    if (document.getElementById(FRAME)) {\n      document.getElementById(FRAME).remove()\n    }\n  }\n\n  return [$frame.contentWindow, unmount]\n}\n","const POP = \"FCL_POP\"\n\nlet popup = null\nlet previousUrl = null\n\nfunction popupWindow(url, windowName, win, w, h) {\n  const y = win.top.outerHeight / 2 + win.top.screenY - h / 2\n  const x = win.top.outerWidth / 2 + win.top.screenX - w / 2\n  const popup = win.open(\n    url,\n    windowName,\n    `toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=${w}, height=${h}, top=${y}, left=${x}`\n  )\n  if (!popup)\n    throw new Error(\"Popup failed to open (was it blocked by a popup blocker?)\")\n  return popup\n}\n\nexport function renderPop(src) {\n  if (popup == null || popup?.closed) {\n    popup = popupWindow(src, POP, window, 640, 770)\n  } else if (previousUrl !== src) {\n    popup.location.replace(src)\n    popup.focus()\n  } else {\n    popup.focus()\n  }\n\n  previousUrl = src\n\n  const unmount = () => {\n    if (popup && !popup.closed) {\n      popup.close()\n    }\n    popup = null\n  }\n\n  return [popup, unmount]\n}\n","const TAB = \"FCL_TAB\"\n\nlet tab = null\nlet previousUrl = null\n\nexport function renderTab(src) {\n  if (tab == null || tab?.closed) {\n    tab = window.open(src, \"_blank\")\n    if (!tab)\n      throw new Error(\"Tab failed to open (was it blocked by the browser?)\")\n  } else if (previousUrl !== src) {\n    tab.location.replace(src)\n    tab.focus()\n  } else {\n    tab.focus()\n  }\n\n  previousUrl = src\n\n  const unmount = () => {\n    if (tab && !tab.closed) {\n      tab.close()\n    }\n    tab = null\n  }\n\n  return [tab, unmount]\n}\n","import {renderFrame} from \"./strategies/utils/render-frame\"\nimport {renderPop} from \"./strategies/utils/render-pop\"\nimport {renderTab} from \"./strategies/utils/render-tab\"\nimport {serviceEndpoint} from \"./strategies/utils/service-endpoint\"\n\nconst VIEWS = {\n  \"VIEW/IFRAME\": renderFrame,\n  \"VIEW/POP\": renderPop,\n  \"VIEW/TAB\": renderTab,\n}\n\nexport async function execLocal(service, opts = {}) {\n  try {\n    return VIEWS[service.method](serviceEndpoint(service), opts)\n  } catch (error) {\n    console.error(\"execLocal({service, opts = {}})\", error, {service, opts})\n    throw error\n  }\n}\n","import {fetchService} from \"./utils/fetch-service\"\nimport {normalizePollingResponse} from \"../../../normalizers/service/polling-response\"\nimport {normalizeLocalView} from \"../../../normalizers/service/local-view\"\nimport {poll} from \"./utils/poll\"\nimport {execLocal} from \"../exec-local\"\nimport {VERSION} from \"../../../VERSION\"\n\nexport async function execHttpPost({service, body, config, opts}) {\n  const resp = await fetchService(service, {\n    data: {\n      fclVersion: VERSION,\n      service: {\n        params: service.params,\n        data: service.data,\n        type: service.type,\n      },\n      config,\n      ...body,\n    },\n  }).then(normalizePollingResponse)\n\n  if (resp.status === \"APPROVED\") {\n    return resp.data\n  } else if (resp.status === \"DECLINED\") {\n    throw new Error(`Declined: ${resp.reason || \"No reason supplied.\"}`)\n  } else if (resp.status === \"REDIRECT\") {\n    return resp\n  } else if (resp.status === \"PENDING\") {\n    var canContinue = true\n    const [_, unmount] = await execLocal(normalizeLocalView(resp.local))\n\n    const close = () => {\n      try {\n        unmount()\n        canContinue = false\n      } catch (error) {\n        console.error(\"Frame Close Error\", error)\n      }\n    }\n\n    return poll(resp.updates, () => canContinue)\n      .then(serviceResponse => {\n        close()\n        return serviceResponse\n      })\n      .catch(error => {\n        console.error(error)\n        close()\n        throw error\n      })\n  } else {\n    console.error(`Auto Decline: Invalid Response`, {service, resp})\n    throw new Error(`Auto Decline: Invalid Response`)\n  }\n}\n","const CLOSE_EVENT = \"FCL:VIEW:CLOSE\"\nconst READY_EVENT = \"FCL:VIEW:READY\"\nconst RESPONSE_EVENT = \"FCL:VIEW:RESPONSE\"\n\nconst _ = e => typeof e === \"string\" && e.toLowerCase()\n\nconst IGNORE = new Set([\n  \"monetizationstart\",\n  \"monetizationpending\",\n  \"monetizationprogress\",\n  \"monetizationstop\",\n])\n\nconst deprecate = (was, want) =>\n  console.warn(\n    \"DEPRECATION NOTICE\",\n    `Received ${was}, please use ${want} for this and future versions of FCL`\n  )\n\nexport const buildMessageHandler =\n  ({close, send, onReady, onResponse, onMessage}) =>\n  e => {\n    try {\n      if (typeof e.data !== \"object\") return\n      if (IGNORE.has(e.data.type)) return\n      if (_(e.data.type) === _(CLOSE_EVENT)) close()\n      if (_(e.data.type) === _(READY_EVENT)) onReady(e, {send, close})\n      if (_(e.data.type) === _(RESPONSE_EVENT)) onResponse(e, {send, close})\n      onMessage(e, {send, close})\n\n      // Backwards Compatible\n      if (_(e.data.type) === _(\"FCL:FRAME:READY\")) {\n        deprecate(e.data.type, READY_EVENT)\n        onReady(e, {send, close})\n      }\n      if (_(e.data.type) === _(\"FCL:FRAME:RESPONSE\")) {\n        deprecate(e.data.type, RESPONSE_EVENT)\n        onResponse(e, {send, close})\n      }\n      if (_(e.data.type) === _(\"FCL:FRAME:CLOSE\")) {\n        deprecate(e.data.type, CLOSE_EVENT)\n        close()\n      }\n      //\n      if (_(e.data.type) === _(\"FCL::CHALLENGE::RESPONSE\")) {\n        deprecate(e.data.type, RESPONSE_EVENT)\n        onResponse(e, {send, close})\n      }\n      if (_(e.data.type) === _(\"FCL::AUTHZ_READY\")) {\n        deprecate(e.data.type, READY_EVENT)\n        onReady(e, {send, close})\n      }\n      if (_(e.data.type) === _(\"FCL::CHALLENGE::CANCEL\")) {\n        deprecate(e.data.type, CLOSE_EVENT)\n        close()\n      }\n      if (_(e.data.type) === _(\"FCL::CANCEL\")) {\n        deprecate(e.data.type, CLOSE_EVENT)\n        close()\n      }\n    } catch (error) {\n      console.error(\"Frame Callback Error\", error)\n      close()\n    }\n  }\n","import {renderFrame} from \"./render-frame\"\nimport {serviceEndpoint} from \"./service-endpoint\"\nimport {buildMessageHandler} from \"./buildMessageHandler\"\n\nconst noop = () => {}\n\nexport function frame(service, opts = {}) {\n  if (service == null) return {send: noop, close: noop}\n\n  const onClose = opts.onClose || noop\n  const onMessage = opts.onMessage || noop\n  const onReady = opts.onReady || noop\n  const onResponse = opts.onResponse || noop\n\n  const handler = buildMessageHandler({\n    close,\n    send,\n    onReady,\n    onResponse,\n    onMessage,\n  })\n  window.addEventListener(\"message\", handler)\n\n  const [$frame, unmount] = renderFrame(serviceEndpoint(service))\n  return {send, close}\n\n  function close() {\n    try {\n      window.removeEventListener(\"message\", handler)\n      unmount()\n      onClose()\n    } catch (error) {\n      console.error(\"Frame Close Error\", error)\n    }\n  }\n\n  function send(msg) {\n    try {\n      $frame.postMessage(JSON.parse(JSON.stringify(msg || {})), \"*\")\n    } catch (error) {\n      console.error(\"Frame Send Error\", msg, error)\n    }\n  }\n}\n","import {uid} from \"@onflow/util-uid\"\nimport {frame} from \"./utils/frame\"\nimport {normalizePollingResponse} from \"../../../normalizers/service/polling-response\"\nimport {VERSION} from \"../../../VERSION\"\n\nexport function execIframeRPC({service, body, config, opts}) {\n  return new Promise((resolve, reject) => {\n    const id = uid()\n    const includeOlderJsonRpcCall = opts.includeOlderJsonRpcCall\n\n    frame(service, {\n      async onReady(_, {send}) {\n        try {\n          send({\n            type: \"FCL:VIEW:READY:RESPONSE\",\n            fclVersion: VERSION,\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type,\n            },\n            config,\n          })\n          send({\n            fclVersion: VERSION,\n            type: \"FCL:FRAME:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type,\n            },\n            config,\n            deprecated: {\n              message:\n                \"FCL:FRAME:READY:RESPONSE is deprecated and replaced with type: FCL:VIEW:READY:RESPONSE\",\n            },\n          })\n          if (includeOlderJsonRpcCall) {\n            send({\n              jsonrpc: \"2.0\",\n              id: id,\n              method: \"fcl:sign\",\n              params: [body, service.params],\n              deprecated: {\n                message:\n                  \"jsonrpc is deprecated and replaced with type: FCL:VIEW:READY:RESPONSE\",\n              },\n            })\n          }\n        } catch (error) {\n          throw error\n        }\n      },\n\n      onResponse(e, {close}) {\n        try {\n          if (typeof e.data !== \"object\") return\n          const resp = normalizePollingResponse(e.data)\n\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data)\n              close()\n              break\n\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`)\n              close()\n              break\n\n            case \"REDIRECT\":\n              resolve(resp)\n              close()\n              break\n\n            default:\n              reject(`Declined: No reason supplied`)\n              close()\n              break\n          }\n        } catch (error) {\n          console.error(\"execIframeRPC onResponse error\", error)\n          throw error\n        }\n      },\n\n      onMessage(e, {close}) {\n        try {\n          if (typeof e.data !== \"object\") return\n          if (e.data.jsonrpc !== \"2.0\") return\n          if (e.data.id !== id) return\n          const resp = normalizePollingResponse(e.data.result)\n\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data)\n              close()\n              break\n\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`)\n              close()\n              break\n\n            case \"REDIRECT\":\n              resolve(resp)\n              close()\n              break\n\n            default:\n              reject(`Declined: No reason supplied`)\n              close()\n              break\n          }\n        } catch (error) {\n          console.error(\"execIframeRPC onMessage error\", error)\n          throw error\n        }\n      },\n\n      onClose() {\n        reject(`Declined: Externally Halted`)\n      },\n    })\n  })\n}\n","import {renderPop} from \"./render-pop\"\nimport {serviceEndpoint} from \"./service-endpoint\"\nimport {buildMessageHandler} from \"./buildMessageHandler\"\n\nconst noop = () => {}\n\nexport function pop(service, opts = {}) {\n  if (service == null) return {send: noop, close: noop}\n\n  const onClose = opts.onClose || noop\n  const onMessage = opts.onMessage || noop\n  const onReady = opts.onReady || noop\n  const onResponse = opts.onResponse || noop\n\n  const handler = buildMessageHandler({\n    close,\n    send,\n    onReady,\n    onResponse,\n    onMessage,\n  })\n  window.addEventListener(\"message\", handler)\n\n  const [$pop, unmount] = renderPop(serviceEndpoint(service))\n\n  const timer = setInterval(function () {\n    if ($pop && $pop.closed) {\n      close()\n    }\n  }, 500)\n\n  return {send, close}\n\n  function close() {\n    try {\n      window.removeEventListener(\"message\", handler)\n      clearInterval(timer)\n      unmount()\n      onClose()\n    } catch (error) {\n      console.error(\"Popup Close Error\", error)\n    }\n  }\n\n  function send(msg) {\n    try {\n      $pop.postMessage(JSON.parse(JSON.stringify(msg || {})), \"*\")\n    } catch (error) {\n      console.error(\"Popup Send Error\", msg, error)\n    }\n  }\n}\n","import {uid} from \"@onflow/util-uid\"\nimport {pop} from \"./utils/pop\"\nimport {normalizePollingResponse} from \"../../../normalizers/service/polling-response\"\nimport {VERSION} from \"../../../VERSION\"\n\nexport function execPopRPC({service, body, config, opts}) {\n  return new Promise((resolve, reject) => {\n    const id = uid()\n    const {redir, includeOlderJsonRpcCall} = opts\n\n    pop(service, {\n      async onReady(_, {send}) {\n        try {\n          send({\n            fclVersion: VERSION,\n            type: \"FCL:VIEW:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type,\n            },\n            config,\n          })\n          send({\n            fclVersion: VERSION,\n            type: \"FCL:FRAME:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type,\n            },\n            config,\n            deprecated: {\n              message:\n                \"FCL:FRAME:READY:RESPONSE is deprecated and replaced with type: FCL:VIEW:READY:RESPONSE\",\n            },\n          })\n          if (includeOlderJsonRpcCall) {\n            send({\n              jsonrpc: \"2.0\",\n              id: id,\n              method: \"fcl:sign\",\n              params: [body, service.params],\n            })\n          }\n        } catch (error) {\n          throw error\n        }\n      },\n\n      onResponse(e, {close}) {\n        try {\n          if (typeof e.data !== \"object\") return\n          const resp = normalizePollingResponse(e.data)\n\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data)\n              !redir && close()\n              break\n\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`)\n              close()\n              break\n\n            case \"REDIRECT\":\n              resolve(resp)\n              close()\n              break\n\n            default:\n              reject(`Declined: No reason supplied`)\n              close()\n              break\n          }\n        } catch (error) {\n          console.error(\"execPopRPC onResponse error\", error)\n          throw error\n        }\n      },\n\n      onMessage(e, {close}) {\n        try {\n          if (typeof e.data !== \"object\") return\n          if (e.data.jsonrpc !== \"2.0\") return\n          if (e.data.id !== id) return\n          const resp = normalizePollingResponse(e.data.result)\n\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data)\n              !redir && close()\n              break\n\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`)\n              close()\n              break\n\n            case \"REDIRECT\":\n              resolve(resp)\n              close()\n              break\n\n            default:\n              reject(`Declined: No reason supplied`)\n              close()\n              break\n          }\n        } catch (error) {\n          console.error(\"execPopRPC onMessage error\", error)\n          throw error\n        }\n      },\n\n      onClose() {\n        reject(`Declined: Externally Halted`)\n      },\n    })\n  })\n}\n","import {renderTab} from \"./render-tab\"\nimport {serviceEndpoint} from \"./service-endpoint\"\nimport {buildMessageHandler} from \"./buildMessageHandler\"\n\nconst noop = () => {}\n\nexport function tab(service, opts = {}) {\n  if (service == null) return {send: noop, close: noop}\n\n  const onClose = opts.onClose || noop\n  const onMessage = opts.onMessage || noop\n  const onReady = opts.onReady || noop\n  const onResponse = opts.onResponse || noop\n\n  const handler = buildMessageHandler({\n    close,\n    send,\n    onReady,\n    onResponse,\n    onMessage,\n  })\n  window.addEventListener(\"message\", handler)\n\n  const [$tab, unmount] = renderTab(serviceEndpoint(service))\n  const timer = setInterval(function () {\n    if ($tab && $tab.closed) {\n      close()\n    }\n  }, 500)\n\n  return {send, close}\n\n  function close() {\n    try {\n      window.removeEventListener(\"message\", handler)\n      clearInterval(timer)\n      unmount()\n      onClose()\n    } catch (error) {\n      console.error(\"Tab Close Error\", error)\n    }\n  }\n\n  function send(msg) {\n    try {\n      $tab.postMessage(JSON.parse(JSON.stringify(msg || {})), \"*\")\n    } catch (error) {\n      console.error(\"Tab Send Error\", msg, error)\n    }\n  }\n}\n","import {uid} from \"@onflow/util-uid\"\nimport {tab} from \"./utils/tab\"\nimport {normalizePollingResponse} from \"../../../normalizers/service/polling-response\"\nimport {VERSION} from \"../../../VERSION\"\n\nexport function execTabRPC({service, body, config, opts}) {\n  return new Promise((resolve, reject) => {\n    const id = uid()\n    const {redir, includeOlderJsonRpcCall} = opts\n\n    tab(service, {\n      async onReady(_, {send}) {\n        try {\n          send({\n            fclVersion: VERSION,\n            type: \"FCL:VIEW:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type,\n            },\n            config,\n          })\n          send({\n            fclVersion: VERSION,\n            type: \"FCL:FRAME:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type,\n            },\n            config,\n            deprecated: {\n              message:\n                \"FCL:FRAME:READY:RESPONSE is deprecated and replaced with type: FCL:VIEW:READY:RESPONSE\",\n            },\n          })\n          if (includeOlderJsonRpcCall) {\n            send({\n              jsonrpc: \"2.0\",\n              id: id,\n              method: \"fcl:sign\",\n              params: [body, service.params],\n            })\n          }\n        } catch (error) {\n          throw error\n        }\n      },\n\n      onResponse(e, {close}) {\n        try {\n          if (typeof e.data !== \"object\") return\n          const resp = normalizePollingResponse(e.data)\n\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data)\n              !redir && close()\n              break\n\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`)\n              close()\n              break\n\n            case \"REDIRECT\":\n              resolve(resp)\n              close()\n              break\n\n            default:\n              reject(`Declined: No reason supplied`)\n              close()\n              break\n          }\n        } catch (error) {\n          console.error(\"execPopRPC onResponse error\", error)\n          throw error\n        }\n      },\n\n      onMessage(e, {close}) {\n        try {\n          if (typeof e.data !== \"object\") return\n          if (e.data.jsonrpc !== \"2.0\") return\n          if (e.data.id !== id) return\n          const resp = normalizePollingResponse(e.data.result)\n\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data)\n              !redir && close()\n              break\n\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`)\n              close()\n              break\n\n            case \"REDIRECT\":\n              resolve(resp)\n              close()\n              break\n\n            default:\n              reject(`Declined: No reason supplied`)\n              close()\n              break\n          }\n        } catch (error) {\n          console.error(\"execPopRPC onMessage error\", error)\n          throw error\n        }\n      },\n\n      onClose() {\n        reject(`Declined: Externally Halted`)\n      },\n    })\n  })\n}\n","import {buildMessageHandler} from \"./buildMessageHandler\"\n\nconst noop = () => {}\n\nexport function extension(service, opts = {}) {\n  if (service == null) return {send: noop, close: noop}\n\n  const onClose = opts.onClose || noop\n  const onMessage = opts.onMessage || noop\n  const onReady = opts.onReady || noop\n  const onResponse = opts.onResponse || noop\n\n  const handler = buildMessageHandler({\n    close,\n    send,\n    onReady,\n    onResponse,\n    onMessage,\n  })\n  window.addEventListener(\"message\", handler)\n\n  send({service})\n\n  return {send, close}\n\n  function close() {\n    try {\n      window.removeEventListener(\"message\", handler)\n      onClose()\n    } catch (error) {\n      console.error(\"Ext Close Error\", error)\n    }\n  }\n\n  function send(msg) {\n    try {\n      window && window.postMessage(JSON.parse(JSON.stringify(msg || {})), \"*\")\n    } catch (error) {\n      console.error(\"Ext Send Error\", msg, error)\n    }\n  }\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {extension} from \"./utils/extension\"\nimport {normalizePollingResponse} from \"../../../normalizers/service/polling-response\"\nimport {VERSION} from \"../../../VERSION\"\n\nexport function execExtRPC({service, body, config, opts}) {\n  return new Promise((resolve, reject) => {\n    extension(service, {\n      async onReady(_, {send}) {\n        try {\n          send({\n            fclVersion: VERSION,\n            type: \"FCL:VIEW:READY:RESPONSE\",\n            body,\n            service: {\n              params: service.params,\n              data: service.data,\n              type: service.type,\n            },\n            config,\n          })\n        } catch (error) {\n          throw error\n        }\n      },\n\n      onResponse(e, {close}) {\n        try {\n          if (typeof e.data !== \"object\") return\n          const resp = normalizePollingResponse(e.data)\n\n          switch (resp.status) {\n            case \"APPROVED\":\n              resolve(resp.data)\n              close()\n              break\n\n            case \"DECLINED\":\n              reject(`Declined: ${resp.reason || \"No reason supplied\"}`)\n              close()\n              break\n\n            case \"REDIRECT\":\n              resolve(resp)\n              close()\n              break\n\n            default:\n              reject(`Declined: No reason supplied`)\n              close()\n              break\n          }\n        } catch (error) {\n          console.error(\"execExtRPC onResponse error\", error)\n          throw error\n        }\n      },\n\n      onClose() {\n        reject(`Declined: Externally Halted`)\n      },\n    })\n  })\n}\n","import {execHttpPost} from \"./strategies/http-post\"\nimport {execIframeRPC} from \"./strategies/iframe-rpc\"\nimport {execPopRPC} from \"./strategies/pop-rpc\"\nimport {execTabRPC} from \"./strategies/tab-rpc\"\nimport {execExtRPC} from \"./strategies/ext-rpc\"\nimport {invariant} from \"@onflow/util-invariant\"\nimport {LEVELS, log} from \"@onflow/util-logger\"\nimport {isRequired, isString, isObject, isFunc} from \"../../exec/utils/is\"\n\nconst CORE_STRATEGIES = {\n  \"HTTP/RPC\": execHttpPost,\n  \"HTTP/POST\": execHttpPost,\n  \"IFRAME/RPC\": execIframeRPC,\n  \"POP/RPC\": execPopRPC,\n  \"TAB/RPC\": execTabRPC,\n  \"EXT/RPC\": execExtRPC,\n}\n\nconst supportedPlugins = [\"ServicePlugin\"]\nconst supportedServicePlugins = [\"discovery-service\"]\n\nconst validateDiscoveryPlugin = servicePlugin => {\n  const {services, serviceStrategy} = servicePlugin\n  invariant(\n    Array.isArray(services) && services.length,\n    \"Array of Discovery Services is required\"\n  )\n\n  for (const ds of services) {\n    invariant(\n      isRequired(ds.f_type) && ds.f_type === \"Service\",\n      \"Service is required\"\n    )\n    invariant(\n      isRequired(ds.type) && ds.type === \"authn\",\n      `Service must be type authn. Received ${ds.type}`\n    )\n    invariant(\n      ds.method in CORE_STRATEGIES || serviceStrategy.method === ds.method,\n      `Service method ${ds.method} is not supported`\n    )\n  }\n\n  invariant(isRequired(serviceStrategy), \"Service strategy is required\")\n  invariant(\n    isRequired(serviceStrategy.method) && isString(serviceStrategy.method),\n    \"Service strategy method is required\"\n  )\n  invariant(\n    isRequired(serviceStrategy.exec) && isFunc(serviceStrategy.exec),\n    \"Service strategy exec function is required\"\n  )\n\n  return {discoveryServices: services, serviceStrategy}\n}\n\nconst ServiceRegistry = () => {\n  let services = new Set()\n  let strategies = new Map(Object.entries(CORE_STRATEGIES))\n\n  const add = servicePlugin => {\n    invariant(\n      supportedServicePlugins.includes(servicePlugin.type),\n      `Service Plugin type ${servicePlugin.type} is not supported`\n    )\n    if (servicePlugin.type === \"discovery-service\") {\n      const {discoveryServices, serviceStrategy} =\n        validateDiscoveryPlugin(servicePlugin)\n      setServices(discoveryServices)\n      if (!strategies.has(serviceStrategy.method)) {\n        strategies.set(serviceStrategy.method, serviceStrategy.exec)\n      } else {\n        log({\n          title: `Add Service Plugin`,\n          message: `Service strategy for ${serviceStrategy.method} already exists`,\n          level: LEVELS.warn,\n        })\n      }\n    }\n  }\n\n  const setServices = discoveryServices =>\n    (services = new Set([...discoveryServices]))\n\n  const getServices = () => [...services]\n\n  const getStrategy = method => strategies.get(method)\n\n  const getStrategies = () => [...strategies.keys()]\n\n  return Object.freeze({\n    add,\n    getServices,\n    getStrategy,\n    getStrategies,\n  })\n}\n\nconst validatePlugins = plugins => {\n  let pluginsArray\n  invariant(plugins, \"No plugins supplied\")\n\n  if (!Array.isArray(plugins)) {\n    pluginsArray = [plugins]\n  } else {\n    pluginsArray = [...plugins]\n  }\n  for (const p of pluginsArray) {\n    invariant(isRequired(p.name), \"Plugin name is required\")\n    invariant(isRequired(p.f_type), \"Plugin f_type is required\")\n    invariant(\n      supportedPlugins.includes(p.f_type),\n      `Plugin type ${p.f_type} is not supported`\n    )\n  }\n\n  return pluginsArray\n}\n\nconst PluginRegistry = () => {\n  const pluginsMap = new Map()\n\n  const getPlugins = () => pluginsMap\n\n  const add = plugins => {\n    const pluginsArray = validatePlugins(plugins)\n    for (const p of pluginsArray) {\n      pluginsMap.set(p.name, p)\n      if (p.f_type === \"ServicePlugin\") {\n        serviceRegistry.add(p)\n      }\n    }\n  }\n\n  return Object.freeze({\n    add,\n    getPlugins,\n  })\n}\n\nexport const serviceRegistry = ServiceRegistry()\nexport const pluginRegistry = PluginRegistry()\n","import {invariant} from \"@onflow/util-invariant\"\nimport {log, LEVELS} from \"@onflow/util-logger\"\nimport {serviceRegistry} from \"./plugins\"\nimport {getChainId} from \"../../utils\"\nimport {VERSION} from \"../../VERSION\"\nimport {configLens} from \"../../default-config\"\n\nconst execStrategy = async ({service, body, config, opts}) => {\n  \n  //GET WHICH STRATEGY FN TO EXECUTE -> IF IFRAME, WILL CALL THE EXEC IFRAME STRATEGY\n  const strategy = serviceRegistry.getStrategy(service.method)\n\n  //EXECUTE THE STRATEGY WITH THE DATA\n  console.log('strategy data: ', {service, body, config, opts})\n  return strategy({service, body, config, opts})\n}\n\nexport async function execStrategyData ({service, msg = {}, config = {}, opts = {}}) {\n  msg.data = service.data\n\n  const execConfig = {\n    services: await configLens(/^service\\./),\n    app: await configLens(/^app\\.detail\\./),\n    client: {\n      ...config.client,\n      fclVersion: VERSION,\n      fclLibrary: \"https://github.com/onflow/fcl-js\",\n      hostname: window?.location?.hostname ?? null,\n      network: await getChainId(),\n    },\n  }\n\n  // console.log('was here 5', service)\n\n  return {\n      service,\n      body: msg,\n      config: execConfig,\n      opts,\n    }\n}\n\nexport async function execService({service, msg = {}, config = {}, opts = {}}) {\n  msg.data = service.data\n\n  //CREATE THE EXEC CONFIC OBJECT\n  const execConfig = {\n    services: await configLens(/^service\\./),\n    app: await configLens(/^app\\.detail\\./),\n    client: {\n      ...config.client,\n      fclVersion: VERSION,\n      fclLibrary: \"https://github.com/onflow/fcl-js\",\n      hostname: window?.location?.hostname ?? null,\n      network: await getChainId(),\n    },\n  }\n\n  try {\n    //EXECUTE THE STRATEGY\n    const res = await execStrategy({\n      service,\n      body: msg,\n      config: execConfig,\n      opts,\n    })\n    if (res.status === \"REDIRECT\") {\n      invariant(\n        service.type === res.data.type,\n        \"Cannot shift recursive service type in execService\"\n      )\n      return await execService({\n        service: res.data,\n        msg,\n        config: execConfig,\n        opts,\n      })\n    } else {\n      return res\n    }\n  } catch (error) {\n    log({\n      title: `Error on execService ${service?.type}`,\n      message: error,\n      level: LEVELS.error,\n    })\n    throw error\n  }\n}\n","import {COMPOSITE_SIGNATURE_PRAGMA} from \"./__vsn\"\nimport {sansPrefix} from \"@onflow/util-address\"\n\n// {\n//    \"f_type\": \"CompositeSignature\",\n//    \"f_vsn\": \"1.0.0\",\n//    \"addr\": \"_____\",         // sans-prefix\n//    \"signature\": \"adfe1234\", // hex\n//    \"keyId\": 3,\n// }\nexport function normalizeCompositeSignature(resp) {\n  if (resp == null) return null\n\n  switch (resp[\"f_vsn\"]) {\n    case \"1.0.0\":\n      return resp\n\n    default:\n      return {\n        ...COMPOSITE_SIGNATURE_PRAGMA,\n        addr: sansPrefix(resp.addr || resp.address),\n        signature: resp.signature || resp.sig,\n        keyId: resp.keyId,\n      }\n  }\n}\n","import {config} from \"@onflow/config\"\nimport {invariant} from \"@onflow/util-invariant\"\nimport {serviceRegistry} from \"../current-user/exec-service/plugins\"\n\nexport const makeDiscoveryServices = async () => {\n  const extensionServices = window?.fcl_extensions || []\n  return [...extensionServices, ...serviceRegistry.getServices()]\n}\n\nexport async function getDiscoveryService(service) {\n  const discoveryAuthnInclude = await config.get(\"discovery.authn.include\", [])\n  const discoveryWalletMethod = await config.first([\n    \"discovery.wallet.method\",\n    \"discovery.wallet.method.default\",\n  ])\n  const method = service?.method ? service.method : discoveryWalletMethod\n  const endpoint =\n    service?.endpoint ??\n    (await config.first([\"discovery.wallet\", \"challenge.handshake\"]))\n\n  invariant(\n    endpoint,\n    `\n    If no service is passed to \"authenticate,\" then \"discovery.wallet\" must be defined in fcl config.\n    See: \"https://docs.onflow.org/fcl/reference/api/#setting-configuration-values\"\n    `\n  )\n\n  return {\n    ...service,\n    type: \"authn\",\n    endpoint,\n    method,\n    discoveryAuthnInclude,\n  }\n}\n","import {config} from \"@onflow/config\"\nimport {invariant} from \"@onflow/util-invariant\"\nimport {serviceRegistry} from \"../current-user/exec-service/plugins\"\nimport {getChainId} from \"../utils\"\nimport {VERSION} from \"../VERSION\"\nimport {makeDiscoveryServices} from \"./utils\"\n\nexport async function getServices({types}) {\n  const endpoint = await config.get(\"discovery.authn.endpoint\")\n  invariant(\n    Boolean(endpoint),\n    `\"discovery.authn.endpoint\" in config must be defined.`\n  )\n\n  const include = await config.get(\"discovery.authn.include\", [])\n  const url = new URL(endpoint)\n\n  return fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      type: types,\n      fclVersion: VERSION,\n      include,\n      clientServices: await makeDiscoveryServices(),\n      supportedStrategies: serviceRegistry.getStrategies(),\n      userAgent: window?.navigator?.userAgent,\n      network: await getChainId(),\n    }),\n  }).then(d => d.json())\n}\n","import {\n  spawn,\n  subscriber,\n  snapshoter,\n  INIT,\n  SUBSCRIBE,\n  UNSUBSCRIBE,\n  send,\n} from \"@onflow/util-actor\"\nimport {getServices} from \"../services\"\nimport {LEVELS, log} from \"@onflow/util-logger\"\n\nexport const SERVICE_ACTOR_KEYS = {\n  AUTHN: \"authn\",\n  RESULTS: \"results\",\n  SNAPSHOT: \"SNAPSHOT\",\n  UPDATED: \"UPDATED\",\n  UPDATE_RESULTS: \"UPDATE_RESULTS\",\n}\n\nconst warn = (fact, msg) => {\n  if (fact) {\n    console.warn(\n      `\n      %cFCL Warning\n      ============================\n      ${msg}\n      For more info, please see the docs: https://docs.onflow.org/fcl/\n      ============================\n      `,\n      \"font-weight:bold;font-family:monospace;\"\n    )\n  }\n}\n\nconst fetchServicesFromDiscovery = async () => {\n  try {\n    const services = await getServices({types: [SERVICE_ACTOR_KEYS.AUTHN]})\n    send(SERVICE_ACTOR_KEYS.AUTHN, SERVICE_ACTOR_KEYS.UPDATE_RESULTS, {\n      results: services,\n    })\n  } catch (error) {\n    log({\n      title: `${error.name} Error fetching Discovery API services.`,\n      message: error.message,\n      level: LEVELS.error,\n    })\n  }\n}\n\nconst HANDLERS = {\n  [INIT]: async ctx => {\n    warn(\n      typeof window === \"undefined\",\n      '\"fcl.discovery\" is only available in the browser.'\n    )\n    // If you call this before the window is loaded extensions will not be set yet\n\n    fetchServicesFromDiscovery()\n    // if (document.readyState === 'complete') {\n    //   fetchServicesFromDiscovery()\n    // } else {\n    //   window.onload = async () => {\n    //     fetchServicesFromDiscovery()\n    //   }\n    // }\n  },\n  [SERVICE_ACTOR_KEYS.UPDATE_RESULTS]: (ctx, _letter, data) => {\n    ctx.merge(data)\n    ctx.broadcast(SERVICE_ACTOR_KEYS.UPDATED, {...ctx.all()})\n  },\n  [SUBSCRIBE]: (ctx, letter) => {\n    ctx.subscribe(letter.from)\n    ctx.send(letter.from, SERVICE_ACTOR_KEYS.UPDATED, {...ctx.all()})\n  },\n  [UNSUBSCRIBE]: (ctx, letter) => ctx.unsubscribe(letter.from),\n  [SERVICE_ACTOR_KEYS.SNAPSHOT]: async (ctx, letter) =>\n    letter.reply({...ctx.all()}),\n}\n\nconst spawnProviders = () => spawn(HANDLERS, SERVICE_ACTOR_KEYS.AUTHN)\n\nconst authn = {\n  subscribe: cb => subscriber(SERVICE_ACTOR_KEYS.AUTHN, spawnProviders, cb),\n  snapshot: () => snapshoter(SERVICE_ACTOR_KEYS.AUTHN, spawnProviders),\n  update: () => fetchServicesFromDiscovery(),\n}\n\nexport default authn\n","import authn from \"./services/authn\"\nexport {getDiscoveryService, makeDiscoveryServices} from \"./utils\"\n\nconst discovery = {\n  authn,\n}\n\nexport {discovery}\n","import \"../default-config\";\nimport * as t from \"@onflow/types\";\nimport { account, arg } from \"@onflow/sdk\";\nimport { config } from \"@onflow/config\";\nimport { spawn, send, INIT, SUBSCRIBE, UNSUBSCRIBE } from \"@onflow/util-actor\";\nimport { withPrefix, sansPrefix } from \"@onflow/util-address\";\nimport { invariant } from \"@onflow/util-invariant\";\nimport { log, LEVELS } from \"@onflow/util-logger\";\nimport { buildUser } from \"./build-user\";\nimport { serviceOfType } from \"./service-of-type\";\nimport { execService, execStrategyData } from \"./exec-service\";\nimport { normalizeCompositeSignature } from \"../normalizers/service/composite-signature\";\nimport { getDiscoveryService, makeDiscoveryServices } from \"../discovery\";\nimport { serviceRegistry } from \"./exec-service/plugins\";\nimport { isMobile } from \"../utils\";\n\n/**\n * @typedef {Object} CurrentUser\n * @property {(string|null)} addr - The public address of the current user\n * @property {(string|null)} cid - A wallet specified content identifier for user metadata\n * @property {(number|null)} expiresAt - A wallet specified time-frame for a valid session\n * @property {string} f_type - A type identifier used internally by FCL\n * @property {string} f_vsn - FCL protocol version\n * @property {(boolean|null)} loggedIn - Whether or not the current user is logged in\n * @property {Array<Object>} services - A list of trusted services that express ways of interacting with the current user's identity\n */\n\n/**\n * @typedef {Object} CompositeSignature\n * @property {string} f_type - A type identifier used internally by FCL\n * @property {string} f_vsn - FCL protocol version\n * @property {string} addr - Flow Address (sans prefix)\n * @property {number} keyId - Key ID\n * @property {string} signature - Signature as a hex string\n */\n\nexport const isFn = (d) => typeof d === \"function\";\n\nconst NAME = \"CURRENT_USER\";\nconst UPDATED = \"CURRENT_USER/UPDATED\";\nconst SNAPSHOT = \"SNAPSHOT\";\nconst SET_CURRENT_USER = \"SET_CURRENT_USER\";\nconst DEL_CURRENT_USER = \"DEL_CURRENT_USER\";\n\nconst DATA = `{\n  \"f_type\": \"User\",\n  \"f_vsn\": \"1.0.0\",\n  \"addr\":null,\n  \"cid\":null,\n  \"loggedIn\":null,\n  \"expiresAt\":null,\n  \"services\":[]\n}`;\n\nconst getStoredUser = async (storage) => {\n  const fallback = JSON.parse(DATA);\n  const stored = await storage.get(NAME);\n  if (stored != null && fallback[\"f_vsn\"] !== stored[\"f_vsn\"]) {\n    storage.removeItem(NAME);\n    return fallback;\n  }\n  return stored || fallback;\n};\n\nconst HANDLERS = {\n  [INIT]: async (ctx) => {\n    if (typeof window === \"undefined\") {\n      console.warn(\n        `\n        %cFCL Warning\n        ============================\n        \"currentUser\" is only available in the browser.\n        For more info, please see the docs: https://docs.onflow.org/fcl/\n        ============================\n        `,\n        \"font-weight:bold;font-family:monospace;\"\n      );\n    }\n\n    ctx.merge(JSON.parse(DATA));\n    const storage = await config.first([\"fcl.storage\", \"fcl.storage.default\"]);\n    if (storage.can) {\n      const user = await getStoredUser(storage);\n      if (notExpired(user)) ctx.merge(user);\n    }\n  },\n  [SUBSCRIBE]: (ctx, letter) => {\n    ctx.subscribe(letter.from);\n    ctx.send(letter.from, UPDATED, { ...ctx.all() });\n  },\n  [UNSUBSCRIBE]: (ctx, letter) => {\n    ctx.unsubscribe(letter.from);\n  },\n  [SNAPSHOT]: async (ctx, letter) => {\n    letter.reply({ ...ctx.all() });\n  },\n  [SET_CURRENT_USER]: async (ctx, letter, data) => {\n    ctx.merge(data);\n    const storage = await config.first([\"fcl.storage\", \"fcl.storage.default\"]);\n    if (storage.can) storage.put(NAME, ctx.all());\n    ctx.broadcast(UPDATED, { ...ctx.all() });\n  },\n  [DEL_CURRENT_USER]: async (ctx, letter) => {\n    ctx.merge(JSON.parse(DATA));\n    const storage = await config.first([\"fcl.storage\", \"fcl.storage.default\"]);\n    if (storage.can) storage.put(NAME, ctx.all());\n    ctx.broadcast(UPDATED, { ...ctx.all() });\n  },\n};\n\nconst spawnCurrentUser = () => spawn(HANDLERS, NAME);\n\nfunction notExpired(user) {\n  return (\n    user.expiresAt == null ||\n    user.expiresAt === 0 ||\n    user.expiresAt > Date.now()\n  );\n}\n\nasync function getAccountProofData() {\n  let accountProofDataResolver = await config.get(\"fcl.accountProof.resolver\");\n  if (accountProofDataResolver == null) return;\n  if (!isFn(accountProofDataResolver)) {\n    log({\n      title: \"Account Proof Data Resolver must be a function\",\n      message: `Check fcl.accountProof.resolver configuration.\n                Expected: fcl.accountProof.resolver: async () => { ... }\n                Received: fcl.accountProof.resolver: ${typeof accountProofDataResolver}\n                `,\n      level: LEVELS.warn,\n    });\n    return;\n  }\n\n  const accountProofData = await accountProofDataResolver();\n  if (accountProofData == null) return;\n\n  invariant(\n    typeof accountProofData.appIdentifier === \"string\",\n    \"appIdentifier must be a string\"\n  );\n  invariant(\n    /^[0-9a-f]+$/i.test(accountProofData.nonce),\n    \"Nonce must be a hex string\"\n  );\n\n  return accountProofData;\n}\n\nconst makeConfig = async ({ discoveryAuthnInclude }) => {\n  return {\n    client: {\n      discoveryAuthnInclude,\n      clientServices: await makeDiscoveryServices(),\n      supportedStrategies: serviceRegistry.getStrategies(),\n    },\n  };\n};\n\n/**\n * @description - Authenticate a user\n * @param {Object} [opts] - Options\n * @param {Object} [opts.service] - Optional service to use for authentication\n * @param {Boolean} [opts.redir=false] - Optional flag to allow window to stay open after authentication\n * @returns {Promise<CurrentUser>} - User object\n */\nasync function authenticate({ service, redir = false } = {}) {\n  if (\n    service &&\n    !service?.provider?.is_installed &&\n    service?.provider?.requires_install\n  ) {\n    window.location.href = service?.provider?.install_link;\n    return;\n  }\n\n  return new Promise(async (resolve, reject) => {\n    spawnCurrentUser();\n    const opts = { redir };\n    const user = await snapshot();\n    const discoveryService = await getDiscoveryService(service);\n    const refreshService = serviceOfType(user.services, \"authn-refresh\");\n    let accountProofData;\n\n    if (user.loggedIn) {\n      if (refreshService) {\n        try {\n          const response = await execService({\n            service: refreshService,\n            msg: accountProofData,\n            opts,\n          });\n          send(NAME, SET_CURRENT_USER, await buildUser(response));\n        } catch (error) {\n          log({\n            title: `${error.name} Could not refresh wallet authentication.`,\n            message: error.message,\n            level: LEVELS.error,\n          });\n        } finally {\n          return resolve(await snapshot());\n        }\n      } else {\n        return resolve(user);\n      }\n    }\n\n    try {\n      accountProofData = await getAccountProofData();\n    } catch (error) {\n      log({\n        title: `${error.name} On Authentication: Could not resolve account proof data.`,\n        message: error.message,\n        level: LEVELS.error,\n      });\n      return reject(error);\n    }\n\n    try {\n      const response = await execService({\n        service: discoveryService,\n        msg: accountProofData,\n        config: await makeConfig(discoveryService),\n        opts,\n      });\n      send(NAME, SET_CURRENT_USER, await buildUser(response));\n    } catch (error) {\n      log({\n        title: `${error} On Authentication`,\n        message: error,\n        level: LEVELS.error,\n      });\n    } finally {\n      resolve(await snapshot());\n    }\n  });\n}\n\nasync function getStrategyData({ service, redir = false } = {}) {\n  if (\n    service &&\n    !service?.provider?.is_installed &&\n    service?.provider?.requires_install\n  ) {\n    window.location.href = service?.provider?.install_link;\n    return;\n  }\n\n  spawnCurrentUser();\n  const opts = { redir };\n  const user = {};\n  const discoveryService = await getDiscoveryService(service);\n  let accountProofData;\n\n  try {\n    const response = await execStrategyData({\n      service: discoveryService,\n      msg: accountProofData,\n      config: await makeConfig(discoveryService),\n      opts,\n    });\n\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n/**\n * @description - Unauthenticate a user\n * @returns {void}\n */\nfunction unauthenticate() {\n  spawnCurrentUser();\n  send(NAME, DEL_CURRENT_USER);\n}\n\nconst normalizePreAuthzResponse = (authz) => ({\n  f_type: \"PreAuthzResponse\",\n  f_vsn: \"1.0.0\",\n  proposer: (authz || {}).proposer,\n  payer: (authz || {}).payer || [],\n  authorization: (authz || {}).authorization || [],\n});\n\nfunction resolvePreAuthz(authz) {\n  const resp = normalizePreAuthzResponse(authz);\n  const axs = [];\n\n  if (resp.proposer != null) axs.push([\"PROPOSER\", resp.proposer]);\n  for (let az of resp.payer || []) axs.push([\"PAYER\", az]);\n  for (let az of resp.authorization || []) axs.push([\"AUTHORIZER\", az]);\n\n  var result = axs.map(([role, az]) => ({\n    tempId: [az.identity.address, az.identity.keyId].join(\"|\"),\n    addr: az.identity.address,\n    keyId: az.identity.keyId,\n    signingFunction(signable) {\n      return execService({ service: az, msg: signable });\n    },\n    role: {\n      proposer: role === \"PROPOSER\",\n      payer: role === \"PAYER\",\n      authorizer: role === \"AUTHORIZER\",\n    },\n  }));\n  return result;\n}\n\n/**\n * @description\n * Produces the needed authorization details for the current user to submit transactions to Flow\n * It defines a signing function that connects to a user's wallet provider to produce signatures to submit transactions.\n *\n * @param {Object} account - Account object\n * @returns {Promise<Object>} - Account object with signing function\n */\nasync function authorization(account) {\n  spawnCurrentUser();\n\n  return {\n    ...account,\n    tempId: \"CURRENT_USER\",\n    async resolve(account, preSignable) {\n      const user = await authenticate({ redir: true });\n      const authz = serviceOfType(user.services, \"authz\");\n      const preAuthz = serviceOfType(user.services, \"pre-authz\");\n\n      if (preAuthz)\n        return resolvePreAuthz(\n          await execService({\n            service: preAuthz,\n            msg: preSignable,\n          })\n        );\n      if (authz) {\n        let windowRef;\n        if (isMobile() && authz.method === \"WC/RPC\") {\n          windowRef = window.open(\"\", \"_blank\");\n        }\n        return {\n          ...account,\n          tempId: \"CURRENT_USER\",\n          resolve: null,\n          addr: sansPrefix(authz.identity.address),\n          keyId: authz.identity.keyId,\n          sequenceNum: null,\n          signature: null,\n          async signingFunction(signable) {\n            return normalizeCompositeSignature(\n              await execService({\n                service: authz,\n                msg: signable,\n                opts: {\n                  includeOlderJsonRpcCall: true,\n                  windowRef,\n                },\n              })\n            );\n          },\n        };\n      }\n      throw new Error(\n        \"No Authz or PreAuthz Service configured for CURRENT_USER\"\n      );\n    },\n  };\n}\n\n/**\n * @description\n * The callback passed to subscribe will be called when the user authenticates and un-authenticates, making it easy to update the UI accordingly.\n *\n * @param {Function} callback - Callback function\n * @returns {Function} - Unsubscribe function\n */\nfunction subscribe(callback) {\n  spawnCurrentUser();\n  const EXIT = \"@EXIT\";\n  const self = spawn(async (ctx) => {\n    ctx.send(NAME, SUBSCRIBE);\n    while (1) {\n      const letter = await ctx.receive();\n      if (letter.tag === EXIT) {\n        ctx.send(NAME, UNSUBSCRIBE);\n        return;\n      }\n      callback(letter.data);\n    }\n  });\n  return () => send(self, EXIT);\n}\n\n/**\n * @description - Gets the current user\n * @returns {Promise<CurrentUser>} - User object\n */\nfunction snapshot() {\n  spawnCurrentUser();\n  return send(NAME, SNAPSHOT, null, { expectReply: true, timeout: 0 });\n}\n\nasync function info() {\n  spawnCurrentUser();\n  const { addr } = await snapshot();\n  if (addr == null) throw new Error(\"No Flow Address for Current User\");\n  return account(addr);\n}\n\n/**\n * @description - Resolves the current user as an argument\n * @returns {Promise<Function>}\n */\nasync function resolveArgument() {\n  const { addr } = await authenticate();\n  return arg(withPrefix(addr), t.Address);\n}\n\nconst makeSignable = (msg) => {\n  invariant(/^[0-9a-f]+$/i.test(msg), \"Message must be a hex string\");\n\n  return {\n    message: msg,\n  };\n};\n\n/**\n * @description - A method to use allowing the user to personally sign data via FCL Compatible Wallets/Services.\n * @param {string} msg - Message to sign\n * @returns {Promise<CompositeSignature>} - Array of CompositeSignatures\n */\nasync function signUserMessage(msg) {\n  spawnCurrentUser();\n  const user = await authenticate({ redir: true });\n\n  const signingService = serviceOfType(user.services, \"user-signature\");\n\n  invariant(\n    signingService,\n    \"Current user must have authorized a signing service.\"\n  );\n\n  try {\n    const response = await execService({\n      service: signingService,\n      msg: makeSignable(msg),\n    });\n    if (Array.isArray(response)) {\n      return response.map((compSigs) => normalizeCompositeSignature(compSigs));\n    } else {\n      return [normalizeCompositeSignature(response)];\n    }\n  } catch (error) {\n    return error;\n  }\n}\n\nlet currentUser = () => {\n  return {\n    authenticate,\n    unauthenticate,\n    authorization,\n    signUserMessage,\n    subscribe,\n    snapshot,\n    resolveArgument,\n    getStrategyData,\n  };\n};\n\ncurrentUser.authenticate = authenticate;\ncurrentUser.unauthenticate = unauthenticate;\ncurrentUser.authorization = authorization;\ncurrentUser.signUserMessage = signUserMessage;\ncurrentUser.subscribe = subscribe;\ncurrentUser.snapshot = snapshot;\ncurrentUser.resolveArgument = resolveArgument;\ncurrentUser.getStrategyData = getStrategyData;\n\nexport { currentUser };\n","import {invariant} from \"@onflow/util-invariant\"\nimport * as sdk from \"@onflow/sdk\"\nimport {isRequired, isObject, isString, isNumber} from \"./utils/is\"\nimport {normalizeArgs} from \"./utils/normalize-args\"\nimport {currentUser} from \"../current-user\"\nimport {prepTemplateOpts} from \"./utils/prep-template-opts.js\"\nimport {preMutate} from \"./utils/pre.js\"\n\n/** As the current user Mutate the Flow Blockchain\n *\n *  @arg {Object} opts - Mutation Options and configuration\n *  @arg {string} opts.cadence - Cadence Transaction used to mutate Flow\n *  @arg {ArgsFn} opts.args - Arguments passed to cadence transaction\n *  @arg {Object} opts.template - Interaction Template for a transaction\n *  @arg {number} opts.limit - Compute Limit for transaction\n *  @returns {string} Transaction Id\n *\n *  Where:\n *    @callback ArgsFn\n *    @arg {ArgFn}  arg - Argument function to define a single argument\n *    @arg {Object} t   - Cadence Types object used to define the type\n *    @returns {args[]}\n *\n *    @callback ArgFn\n *    @arg {Any}  value - the value of the argument\n *    @arg {Type} type  - the cadence type of the value\n *    @returns {arg}\n *\n *  Example:\n *    fcl.mutate({\n *      cadence: `\n *        transaction(a: Int, b: Int, c: Address) {\n *          prepare(acct: AuthAccount) {\n *            log(acct)\n *            log(a)\n *            log(b)\n *            log(c)\n *          }\n *        }\n *      `,\n *      args: (arg, t) => [\n *        arg(6, t.Int),\n *        arg(7, t.Int),\n *        arg(\"0xba1132bc08f82fe2\", t.Address),\n *      ],\n *    })\n *\n *\n *  Options:\n *    type Options = {\n *      template: InteractionTemplate | String // InteractionTemplate or url to one\n *      cadence: String!,\n *      args: (arg, t) => Array<Arg>,\n *      limit: Number,\n *      authz: AuthzFn, // will overload the trinity of signatory roles\n *      proposer: AuthzFn, // will overload the proposer signatory role\n *      payer: AuthzFn, // will overload the payer signatory role\n *      authorizations: [AuthzFn], // an array of authorization functions used as authorizations signatory roles\n *    }\n */\nexport async function mutate(opts = {}) {\n  var txid\n  try {\n    await preMutate(opts)\n    opts = await prepTemplateOpts(opts)\n\n    // Allow for a config to overwrite the authorization function.\n    // prettier-ignore\n    const authz = await sdk.config().get(\"fcl.authz\", currentUser().authorization)\n\n    txid = sdk.config().overload(opts.dependencies || {}, async () =>\n      // prettier-ignore\n      sdk.send([\n        sdk.transaction(opts.cadence),\n\n        sdk.args(normalizeArgs(opts.args || [])),\n\n        opts.limit && isNumber(opts.limit) && sdk.limit(opts.limit),\n\n        // opts.proposer > opts.authz > authz\n        sdk.proposer(opts.proposer || opts.authz || authz),\n\n        // opts.payer > opts.authz > authz\n        sdk.payer(opts.payer || opts.authz || authz),\n\n        // opts.authorizations > [opts.authz > authz]\n        sdk.authorizations(opts.authorizations || [opts.authz || authz]),\n      ]).then(sdk.decode)\n    )\n\n    return txid\n  } catch (error) {\n    throw error\n  }\n}\n","export const onMessageFromFCL = (messageType, cb = () => {}) => {\n  const buildData = data => {\n    if (data.deprecated)\n      console.warn(\"DEPRECATION NOTICE\", data.deprecated.message)\n    delete data?.body?.interaction\n\n    return data\n  }\n\n  const internal = e => {\n    const {data} = e\n    if (typeof data !== \"object\") return\n    if (typeof data == null) return\n    if (data.type !== messageType) return\n\n    cb(buildData(data))\n  }\n\n  window.addEventListener(\"message\", internal)\n  return () => window.removeEventListener(\"message\", internal)\n}\n","import {onMessageFromFCL} from \"./on-message-from-fcl\"\n\nexport const sendMsgToFCL = (type, msg = {}) => {\n  if (window.location !== window.parent.location) {\n    window.parent.postMessage({...msg, type}, \"*\")\n  } else if (window.opener) {\n    window.opener.postMessage({...msg, type}, \"*\")\n  } else {\n    throw new Error(\"Unable to communicate with parent FCL instance\")\n  }\n}\n\nexport const ready = (cb, msg = {}) => {\n  onMessageFromFCL(\"FCL:VIEW:READY:RESPONSE\", cb)\n  sendMsgToFCL(\"FCL:VIEW:READY\")\n}\n\nexport const close = () => {\n  sendMsgToFCL(\"FCL:VIEW:CLOSE\")\n}\n\nexport const approve = data => {\n  sendMsgToFCL(\"FCL:VIEW:RESPONSE\", {\n    f_type: \"PollingResponse\",\n    f_vsn: \"1.0.0\",\n    status: \"APPROVED\",\n    reason: null,\n    data: data,\n  })\n}\n\nexport const decline = reason => {\n  sendMsgToFCL(\"FCL:VIEW:RESPONSE\", {\n    f_type: \"PollingResponse\",\n    f_vsn: \"1.0.0\",\n    status: \"DECLINED\",\n    reason: reason,\n    data: null,\n  })\n}\n\nexport const redirect = data => {\n  sendMsgToFCL(\"FCL:VIEW:RESPONSE\", {\n    f_type: \"PollingResponse\",\n    f_vsn: \"1.0.0\",\n    status: \"REDIRECT\",\n    reason: null,\n    data: data,\n  })\n}\n","import {withPrefix} from \"@onflow/util-address\"\nimport {COMPOSITE_SIGNATURE_PRAGMA} from \"../normalizers/service/__vsn\"\n\nexport function CompositeSignature(addr, keyId, signature) {\n  this.f_type = COMPOSITE_SIGNATURE_PRAGMA.f_type\n  this.f_vsn = COMPOSITE_SIGNATURE_PRAGMA.f_vsn\n  this.addr = withPrefix(addr)\n  this.keyId = Number(keyId)\n  this.signature = signature\n}\n","import {sansPrefix} from \"@onflow/util-address\"\nimport {invariant} from \"@onflow/util-invariant\"\nimport {Buffer, encode as rlpEncode} from \"@onflow/rlp\"\n\nconst rightPaddedHexBuffer = (value, pad) =>\n  Buffer.from(value.padEnd(pad * 2, \"0\"), \"hex\")\n\nconst leftPaddedHexBuffer = (value, pad) =>\n  Buffer.from(value.padStart(pad * 2, \"0\"), \"hex\")\n\nconst addressBuffer = addr => leftPaddedHexBuffer(addr, 8)\n\nconst nonceBuffer = nonce => Buffer.from(nonce, \"hex\")\n\nexport const encodeAccountProof = (\n  {address, nonce, appIdentifier},\n  includeDomainTag = true\n) => {\n  invariant(\n    address,\n    \"Encode Message For Provable Authn Error: address must be defined\"\n  )\n  invariant(\n    nonce,\n    \"Encode Message For Provable Authn Error: nonce must be defined\"\n  )\n  invariant(\n    appIdentifier,\n    \"Encode Message For Provable Authn Error: appIdentifier must be defined\"\n  )\n\n  invariant(\n    nonce.length >= 64,\n    \"Encode Message For Provable Authn Error: nonce must be minimum of 32 bytes\"\n  )\n\n  const ACCOUNT_PROOF_DOMAIN_TAG = rightPaddedHexBuffer(\n    Buffer.from(\"FCL-ACCOUNT-PROOF-V0.0\").toString(\"hex\"),\n    32\n  )\n\n  if (includeDomainTag) {\n    return Buffer.concat([\n      ACCOUNT_PROOF_DOMAIN_TAG,\n      rlpEncode([\n        appIdentifier,\n        addressBuffer(sansPrefix(address)),\n        nonceBuffer(nonce),\n      ]),\n    ]).toString(\"hex\")\n  }\n\n  return rlpEncode([\n    appIdentifier,\n    addressBuffer(sansPrefix(address)),\n    nonceBuffer(nonce),\n  ]).toString(\"hex\")\n}\n","export function injectExtService(service) {\n  if (service.type === \"authn\" && service.endpoint != null) {\n    if (!Array.isArray(window.fcl_extensions)) {\n      window.fcl_extensions = []\n    }\n    window.fcl_extensions.push(service)\n  } else {\n    console.warn(\"Authn service is required\")\n  }\n}\n","import {invariant} from \"@onflow/util-invariant\"\nimport {withPrefix, sansPrefix} from \"@onflow/util-address\"\nimport {query} from \"../exec/query\"\nimport {encodeAccountProof} from \"../wallet-utils\"\nimport {isString} from \"../exec/utils/is\"\nimport {getChainId} from \"../utils\"\n\nconst ACCOUNT_PROOF = \"ACCOUNT_PROOF\"\nconst USER_SIGNATURE = \"USER_SIGNATURE\"\n\nexport const validateArgs = args => {\n  if (args.appIdentifier) {\n    const {appIdentifier, address, nonce, signatures} = args\n    invariant(\n      isString(appIdentifier),\n      \"verifyAccountProof({ appIdentifier }) -- appIdentifier must be a string\"\n    )\n    invariant(\n      isString(address) && sansPrefix(address).length === 16,\n      \"verifyAccountProof({ address }) -- address must be a valid address\"\n    )\n    invariant(/^[0-9a-f]+$/i.test(nonce), \"nonce must be a hex string\")\n    invariant(\n      Array.isArray(signatures) &&\n        signatures.every((sig, i, arr) => sig.f_type === \"CompositeSignature\"),\n      \"Must include an Array of CompositeSignatures to verify\"\n    )\n    invariant(\n      signatures.map(cs => cs.addr).every((addr, i, arr) => addr === arr[0]),\n      \"User signatures to be verified must be from a single account address\"\n    )\n    return true\n  } else {\n    const {message, address, compSigs} = args\n    invariant(\n      /^[0-9a-f]+$/i.test(message),\n      \"Signed message must be a hex string\"\n    )\n    invariant(\n      isString(address) && sansPrefix(address).length === 16,\n      \"verifyUserSignatures({ address }) -- address must be a valid address\"\n    )\n    invariant(\n      Array.isArray(compSigs) &&\n        compSigs.every((sig, i, arr) => sig.f_type === \"CompositeSignature\"),\n      \"Must include an Array of CompositeSignatures to verify\"\n    )\n    invariant(\n      compSigs.map(cs => cs.addr).every((addr, i, arr) => addr === arr[0]),\n      \"User signatures to be verified must be from a single account address\"\n    )\n    return true\n  }\n}\n\n// TODO: pass in option for contract but we're connected to testnet\n// log address + network -> in sync?\nconst getVerifySignaturesScript = async (sig, opts) => {\n  const verifyFunction =\n    sig === \"ACCOUNT_PROOF\"\n      ? \"verifyAccountProofSignatures\"\n      : \"verifyUserSignatures\"\n\n  let network = await getChainId()\n\n  let fclCryptoContract\n\n  invariant(\n    opts.fclCryptoContract || network === \"testnet\" || network === \"mainnet\",\n    \"${verifyFunction}({ fclCryptoContract }) -- config.flow.network must be specified (testnet || mainnet) or contract address provided via opts.fclCryptoContract\"\n  )\n\n  if (opts.fclCryptoContract) {\n    fclCryptoContract = opts.fclCryptoContract\n  } else {\n    fclCryptoContract =\n      network === \"testnet\" ? \"0x74daa6f9c7ef24b1\" : \"0xb4b82a1c9d21d284\"\n  }\n\n  return `\n      import FCLCrypto from ${fclCryptoContract}\n\n      pub fun main(\n          address: Address, \n          message: String, \n          keyIndices: [Int], \n          signatures: [String]\n      ): Bool {\n        return FCLCrypto.${verifyFunction}(address: address, message: message, keyIndices: keyIndices, signatures: signatures)\n      }\n    `\n}\n\n/**\n * Verify a valid account proof signature or signatures for an account on Flow.\n *\n * @param {string} appIdentifier - A message string in hexadecimal format\n * @param {Object} accountProofData - An object consisting of address, nonce, and signatures\n * @param {string} accountProofData.address - A Flow account address\n * @param {string} accountProofData.nonce - A random string in hexadecimal format (minimum 32 bytes in total, i.e 64 hex characters)\n * @param {Object[]} accountProofData.signatures - An array of composite signatures to verify\n * @param {Object} [opts={}] - Options object\n * @param {string} opts.fclCryptoContract - An optional override Flow account address where the FCLCrypto contract is deployed\n * @return {bool}\n *\n * @example\n *\n *  const accountProofData = {\n *   address: \"0x123\",\n *   nonce: \"F0123\"\n *   signatures: [{f_type: \"CompositeSignature\", f_vsn: \"1.0.0\", addr: \"0x123\", keyId: 0, signature: \"abc123\"}],\n *  }\n *\n *  const isValid = await fcl.AppUtils.verifyAccountProof(\n *    \"AwesomeAppId\",\n *    accountProofData,\n *    {fclCryptoContract}\n *  )\n */\n\nexport async function verifyAccountProof(\n  appIdentifier,\n  {address, nonce, signatures},\n  opts = {}\n) {\n  validateArgs({appIdentifier, address, nonce, signatures})\n  const message = encodeAccountProof({address, nonce, appIdentifier}, false)\n\n  let signaturesArr = []\n  let keyIndices = []\n\n  for (const el of signatures) {\n    signaturesArr.push(el.signature)\n    keyIndices.push(el.keyId.toString())\n  }\n\n  return query({\n    cadence: await getVerifySignaturesScript(ACCOUNT_PROOF, opts),\n    args: (arg, t) => [\n      arg(withPrefix(address), t.Address),\n      arg(message, t.String),\n      arg(keyIndices, t.Array(t.Int)),\n      arg(signaturesArr, t.Array(t.String)),\n    ],\n  })\n}\n\n/**\n * Verify a valid signature/s for an account on Flow.\n *\n * @param {string} msg - A message string in hexadecimal format\n * @param {Array} compSigs - An array of Composite Signatures\n * @param {string} compSigs[].addr - The account address\n * @param {number} compSigs[].keyId - The account keyId\n * @param {string} compSigs[].signature - The signature to verify\n * @param {Object} [opts={}] - Options object\n * @param {string} opts.fclCryptoContract - An optional override of Flow account address where the FCLCrypto contract is deployed\n * @return {bool}\n *\n * @example\n *\n *  const isValid = await fcl.AppUtils.verifyUserSignatures(\n *    Buffer.from('FOO').toString(\"hex\"),\n *    [{f_type: \"CompositeSignature\", f_vsn: \"1.0.0\", addr: \"0x123\", keyId: 0, signature: \"abc123\"}],\n *    {fclCryptoContract}\n *  )\n */\nexport async function verifyUserSignatures(message, compSigs, opts = {}) {\n  const address = withPrefix(compSigs[0].addr)\n  validateArgs({message, address, compSigs})\n\n  let signaturesArr = []\n  let keyIndices = []\n\n  for (const el of compSigs) {\n    signaturesArr.push(el.signature)\n    keyIndices.push(el.keyId.toString())\n  }\n\n  return query({\n    cadence: await getVerifySignaturesScript(USER_SIGNATURE, opts),\n    args: (arg, t) => [\n      arg(address, t.Address),\n      arg(message, t.String),\n      arg(keyIndices, t.Array(t.Int)),\n      arg(signaturesArr, t.Array(t.String)),\n    ],\n  })\n}\n","import {log} from \"@onflow/util-logger\"\nimport {verifyUserSignatures as verify} from \"../app-utils\"\n\n/**\n * Verify a valid signature/s for an account on Flow.\n *\n * @deprecated since version '1.0.0-alpha.0', use AppUtils.verifyUserSignatures instead\n *\n */\nexport const verifyUserSignatures = log.deprecate({\n  pkg: \"FCL\",\n  subject: \"fcl.verifyUserSignatures()\",\n  message: \"Please use fcl.AppUtils.verifyUserSignatures()\",\n  callback: function verifyUserSignatures(message, compSigs) {\n    return verify(message, compSigs)\n  },\n})\n","import {interaction, pipe} from \"@onflow/sdk\"\nimport {resolve as defaultResolve} from \"@onflow/sdk\"\nimport {config, createSignableVoucher} from \"@onflow/sdk\"\n\nexport const serialize = async (args = [], opts = {}) => {\n  const resolveFunction = await config.first(\n    [\"sdk.resolve\"],\n    opts.resolve || defaultResolve\n  )\n\n  if (Array.isArray(args)) args = await pipe(interaction(), args)\n\n  return JSON.stringify(\n    createSignableVoucher(await resolveFunction(args)),\n    null,\n    2\n  )\n}\n","import \"../default-config\"\nimport {\n  spawn,\n  send,\n  subscriber,\n  snapshoter,\n  UPDATED,\n  SNAPSHOT,\n  INIT,\n  SUBSCRIBE,\n  UNSUBSCRIBE,\n  ERROR,\n} from \"@onflow/util-actor\"\nimport {send as fclSend, decode, getTransactionStatus} from \"@onflow/sdk\"\n\nconst RATE = 2500\nconst POLL = \"POLL\"\n\nconst fetchTxStatus = async transactionId => {\n  return fclSend([getTransactionStatus(transactionId)]).then(decode)\n}\n\nconst isExpired = tx => tx.status === 5\nconst isSealed = tx => tx.status >= 4\nconst isExecuted = tx => tx.status >= 3\nconst isFinalized = tx => tx.status >= 2\nconst isPending = tx => tx.status >= 1\nconst isUnknown = tx => tx.status >= 0\n\nconst isDiff = (cur, next) => {\n  return JSON.stringify(cur) !== JSON.stringify(next)\n}\n\nconst HANDLERS = {\n  [INIT]: async ctx => {\n    ctx.sendSelf(POLL)\n  },\n  [SUBSCRIBE]: (ctx, letter) => {\n    ctx.subscribe(letter.from)\n    ctx.send(letter.from, UPDATED, ctx.all())\n  },\n  [UNSUBSCRIBE]: (ctx, letter) => {\n    ctx.unsubscribe(letter.from)\n  },\n  [SNAPSHOT]: async (ctx, letter) => {\n    letter.reply(ctx.all())\n  },\n  [POLL]: async ctx => {\n    let tx\n    try {\n      tx = await fetchTxStatus(ctx.self())\n    } catch (e) {\n      return ctx.fatalError(e)\n    }\n\n    if (!isSealed(tx)) setTimeout(() => ctx.sendSelf(POLL), RATE)\n    if (isDiff(ctx.all(), tx)) ctx.broadcast(UPDATED, tx)\n    ctx.merge(tx)\n  },\n}\n\nconst scoped = transactionId => {\n  if (typeof transactionId === \"object\")\n    transactionId = transactionId.transactionId\n  if (transactionId == null) throw new Error(\"transactionId required\")\n  return transactionId\n}\n\nconst spawnTransaction = transactionId => {\n  return spawn(HANDLERS, scoped(transactionId))\n}\n\nexport function transaction(transactionId) {\n  function snapshot() {\n    return snapshoter(transactionId, spawnTransaction)\n  }\n\n  function subscribe(callback) {\n    return subscriber(scoped(transactionId), spawnTransaction, callback)\n  }\n\n  function once(predicate) {\n    return function innerOnce(opts = {}) {\n      const suppress = opts.suppress || false\n      return new Promise((resolve, reject) => {\n        const unsub = subscribe((txStatus, error) => {\n          if ((error || txStatus.statusCode) && !suppress) {\n            reject(error || txStatus.errorMessage)\n            unsub()\n          } else if (predicate(txStatus)) {\n            resolve(txStatus)\n            unsub()\n          }\n        })\n      })\n    }\n  }\n\n  return {\n    snapshot,\n    subscribe,\n    onceFinalized: once(isFinalized),\n    onceExecuted: once(isExecuted),\n    onceSealed: once(isSealed),\n  }\n}\n\ntransaction.isUnknown = isUnknown\ntransaction.isPending = isPending\ntransaction.isFinalized = isFinalized\ntransaction.isExecuted = isExecuted\ntransaction.isSealed = isSealed\ntransaction.isExpired = isExpired\n","import {spawn, subscriber, SUBSCRIBE, UNSUBSCRIBE} from \"@onflow/util-actor\"\nimport {\n  config,\n  block,\n  getEventsAtBlockHeightRange,\n  send,\n  decode,\n} from \"@onflow/sdk\"\n\nconst RATE = 10000\nconst UPDATED = \"UPDATED\"\nconst TICK = \"TICK\"\nconst HIGH_WATER_MARK = \"hwm\"\n\nconst scheduleTick = async ctx => {\n  return setTimeout(\n    () => ctx.sendSelf(TICK),\n    await config().get(\"fcl.eventPollRate\", RATE)\n  )\n}\n\nconst HANDLERS = {\n  [TICK]: async ctx => {\n    if (!ctx.hasSubs()) return\n    let hwm = ctx.get(HIGH_WATER_MARK)\n    if (hwm == null) {\n      ctx.put(HIGH_WATER_MARK, await block())\n      ctx.put(TICK, await scheduleTick(ctx))\n    } else {\n      let next = await block()\n      ctx.put(HIGH_WATER_MARK, next)\n      if (hwm.height < next.height) {\n        const data = await send([\n          getEventsAtBlockHeightRange(ctx.self(), hwm.height + 1, next.height),\n        ]).then(decode)\n        for (let d of data) ctx.broadcast(UPDATED, d.data)\n      }\n      ctx.put(TICK, await scheduleTick(ctx))\n    }\n  },\n  [SUBSCRIBE]: async (ctx, letter) => {\n    if (!ctx.hasSubs()) {\n      ctx.put(TICK, await scheduleTick(ctx))\n    }\n    ctx.subscribe(letter.from)\n  },\n  [UNSUBSCRIBE]: (ctx, letter) => {\n    ctx.unsubscribe(letter.from)\n    if (!ctx.hasSubs()) {\n      clearTimeout(ctx.get(TICK))\n      ctx.delete(TICK)\n      ctx.delete(HIGH_WATER_MARK)\n    }\n  },\n}\n\nconst spawnEvents = key => spawn(HANDLERS, key)\n\nexport function events(key) {\n  return {\n    subscribe: callback => subscriber(key, spawnEvents, callback),\n  }\n}\n","\"use strict\";var copy=function copy(I,i){return function(O,o){var oi=o*2;var ii=i*2;O[oi]=I[ii];O[oi+1]=I[ii+1]}};module.exports=copy;","\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _copy=_interopRequireDefault(require(\"../copy\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj}}var chi=function chi(_ref){var A=_ref.A,C=_ref.C;for(var y=0;y<25;y+=5){for(var x=0;x<5;x++){(0,_copy[\"default\"])(A,y+x)(C,x)}for(var _x=0;_x<5;_x++){var xy=(y+_x)*2;var x1=(_x+1)%5*2;var x2=(_x+2)%5*2;A[xy]^=~C[x1]&C[x2];A[xy+1]^=~C[x1+1]&C[x2+1]}}};var _default=chi;exports[\"default\"]=_default;","\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var ROUND_CONSTANTS=new Uint32Array([0,1,0,32898,2147483648,32906,2147483648,2147516416,0,32907,0,2147483649,2147483648,2147516545,2147483648,32777,0,138,0,136,0,2147516425,0,2147483658,0,2147516555,2147483648,139,2147483648,32905,2147483648,32771,2147483648,32770,2147483648,128,0,32778,2147483648,2147483658,2147483648,2147516545,2147483648,32896,0,2147483649,2147483648,2147516424]);var _default=ROUND_CONSTANTS;exports[\"default\"]=_default;","\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _roundConstants=_interopRequireDefault(require(\"./round-constants\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj}}var iota=function iota(_ref){var A=_ref.A,roundIndex=_ref.roundIndex;var i=roundIndex*2;A[0]^=_roundConstants[\"default\"][i];A[1]^=_roundConstants[\"default\"][i+1]};var _default=iota;exports[\"default\"]=_default;","\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var PI_SHUFFLES=[10,7,11,17,18,3,5,16,8,21,24,4,15,23,19,13,12,2,20,14,22,9,6,1];var _default=PI_SHUFFLES;exports[\"default\"]=_default;","\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var RHO_OFFSETS=[1,3,6,10,15,21,28,36,45,55,2,14,27,41,56,8,25,43,62,18,39,61,20,44];var _default=RHO_OFFSETS;exports[\"default\"]=_default;","\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _piShuffles=_interopRequireDefault(require(\"./pi-shuffles\"));var _rhoOffsets=_interopRequireDefault(require(\"./rho-offsets\"));var _copy=_interopRequireDefault(require(\"../copy\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj}}var rhoPi=function rhoPi(_ref){var A=_ref.A,C=_ref.C,W=_ref.W;(0,_copy[\"default\"])(A,1)(W,0);var H=0;var L=0;var Wi=0;var ri=32;for(var i=0;i<24;i++){var j=_piShuffles[\"default\"][i];var r=_rhoOffsets[\"default\"][i];(0,_copy[\"default\"])(A,j)(C,0);H=W[0];L=W[1];ri=32-r;Wi=r<32?0:1;W[Wi]=H<<r|L>>>ri;W[(Wi+1)%2]=L<<r|H>>>ri;(0,_copy[\"default\"])(W,0)(A,j);(0,_copy[\"default\"])(C,0)(W,0)}};var _default=rhoPi;exports[\"default\"]=_default;","\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _copy=_interopRequireDefault(require(\"../copy\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj}}var theta=function theta(_ref){var A=_ref.A,C=_ref.C,D=_ref.D,W=_ref.W;var H=0;var L=0;for(var x=0;x<5;x++){var x20=x*2;var x21=(x+5)*2;var x22=(x+10)*2;var x23=(x+15)*2;var x24=(x+20)*2;C[x20]=A[x20]^A[x21]^A[x22]^A[x23]^A[x24];C[x20+1]=A[x20+1]^A[x21+1]^A[x22+1]^A[x23+1]^A[x24+1]}for(var _x=0;_x<5;_x++){(0,_copy[\"default\"])(C,(_x+1)%5)(W,0);H=W[0];L=W[1];W[0]=H<<1|L>>>31;W[1]=L<<1|H>>>31;D[_x*2]=C[(_x+4)%5*2]^W[0];D[_x*2+1]=C[(_x+4)%5*2+1]^W[1];for(var y=0;y<25;y+=5){A[(y+_x)*2]^=D[_x*2];A[(y+_x)*2+1]^=D[_x*2+1]}}};var _default=theta;exports[\"default\"]=_default;","\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _chi=_interopRequireDefault(require(\"./chi\"));var _iota=_interopRequireDefault(require(\"./iota\"));var _rhoPi=_interopRequireDefault(require(\"./rho-pi\"));var _theta=_interopRequireDefault(require(\"./theta\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj}}var permute=function permute(){var C=new Uint32Array(10);var D=new Uint32Array(10);var W=new Uint32Array(2);return function(A){for(var roundIndex=0;roundIndex<24;roundIndex++){(0,_theta[\"default\"])({A:A,C:C,D:D,W:W});(0,_rhoPi[\"default\"])({A:A,C:C,W:W});(0,_chi[\"default\"])({A:A,C:C});(0,_iota[\"default\"])({A:A,roundIndex:roundIndex})}C.fill(0);D.fill(0);W.fill(0)}};var _default=permute;exports[\"default\"]=_default;","\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _buffer=require(\"buffer\");var _permute=_interopRequireDefault(require(\"./permute\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj}}var xorWords=function xorWords(I,O){for(var i=0;i<I.length;i+=8){var o=i/4;O[o]^=I[i+7]<<24|I[i+6]<<16|I[i+5]<<8|I[i+4];O[o+1]^=I[i+3]<<24|I[i+2]<<16|I[i+1]<<8|I[i]}return O};var readWords=function readWords(I,O){for(var o=0;o<O.length;o+=8){var i=o/4;O[o]=I[i+1];O[o+1]=I[i+1]>>>8;O[o+2]=I[i+1]>>>16;O[o+3]=I[i+1]>>>24;O[o+4]=I[i];O[o+5]=I[i]>>>8;O[o+6]=I[i]>>>16;O[o+7]=I[i]>>>24}return O};var Sponge=function Sponge(_ref){var _this=this;var capacity=_ref.capacity,padding=_ref.padding;var keccak=(0,_permute[\"default\"])();var stateSize=200;var blockSize=capacity/8;var queueSize=stateSize-capacity/4;var queueOffset=0;var state=new Uint32Array(stateSize/4);var queue=_buffer.Buffer.allocUnsafe(queueSize);this.absorb=function(buffer){for(var i=0;i<buffer.length;i++){queue[queueOffset]=buffer[i];queueOffset+=1;if(queueOffset>=queueSize){xorWords(queue,state);keccak(state);queueOffset=0}}return _this};this.squeeze=function(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var output={buffer:options.buffer||_buffer.Buffer.allocUnsafe(blockSize),padding:options.padding||padding,queue:_buffer.Buffer.allocUnsafe(queue.length),state:new Uint32Array(state.length)};queue.copy(output.queue);for(var i=0;i<state.length;i++){output.state[i]=state[i]}output.queue.fill(0,queueOffset);output.queue[queueOffset]|=output.padding;output.queue[queueSize-1]|=128;xorWords(output.queue,output.state);for(var offset=0;offset<output.buffer.length;offset+=queueSize){keccak(output.state);readWords(output.state,output.buffer.slice(offset,offset+queueSize))}return output.buffer};this.reset=function(){queue.fill(0);state.fill(0);queueOffset=0;return _this};return this};var _default=Sponge;exports[\"default\"]=_default;","\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=exports.SHAKE=exports.SHA3Hash=exports.SHA3=exports.Keccak=void 0;var _buffer=require(\"buffer\");var _sponge=_interopRequireDefault(require(\"./sponge\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj}}var createHash=function createHash(_ref){var allowedSizes=_ref.allowedSizes,defaultSize=_ref.defaultSize,padding=_ref.padding;return function Hash(){var _this=this;var size=arguments.length>0&&arguments[0]!==undefined?arguments[0]:defaultSize;if(!this||this.constructor!==Hash){return new Hash(size)}if(allowedSizes&&!allowedSizes.includes(size)){throw new Error(\"Unsupported hash length\")}var sponge=new _sponge[\"default\"]({capacity:size});this.update=function(input){var encoding=arguments.length>1&&arguments[1]!==undefined?arguments[1]:\"utf8\";if(_buffer.Buffer.isBuffer(input)){sponge.absorb(input);return _this}if(typeof input===\"string\"){return _this.update(_buffer.Buffer.from(input,encoding))}throw new TypeError(\"Not a string or buffer\")};this.digest=function(){var formatOrOptions=arguments.length>0&&arguments[0]!==undefined?arguments[0]:\"binary\";var options=typeof formatOrOptions===\"string\"?{format:formatOrOptions}:formatOrOptions;var buffer=sponge.squeeze({buffer:options.buffer,padding:options.padding||padding});if(options.format&&options.format!==\"binary\"){return buffer.toString(options.format)}return buffer};this.reset=function(){sponge.reset();return _this};return this}};var Keccak=createHash({allowedSizes:[224,256,384,512],defaultSize:512,padding:1});exports.Keccak=Keccak;var SHA3=createHash({allowedSizes:[224,256,384,512],defaultSize:512,padding:6});exports.SHA3=SHA3;var SHAKE=createHash({allowedSizes:[128,256],defaultSize:256,padding:31});exports.SHAKE=SHAKE;var SHA3Hash=Keccak;exports.SHA3Hash=SHA3Hash;SHA3.SHA3Hash=SHA3Hash;var _default=SHA3;exports[\"default\"]=_default;","import {SHA3} from \"sha3\"\nimport {Buffer} from \"@onflow/rlp\"\n\nexport async function genHash(utf8String) {\n  const sha = new SHA3(256)\n  sha.update(Buffer.from(utf8String, \"utf8\"))\n  return sha.digest(\"hex\")\n}\n","import {invariant} from \"@onflow/sdk\"\nimport {encode as rlpEncode} from \"@onflow/rlp\"\nimport {genHash} from \"./utils/hash.js\"\nimport {normalizeInteractionTemplate} from \"../normalizers/interaction-template/interaction-template.js\"\n\nexport async function generateTemplateId({template}) {\n  invariant(\n    template != undefined,\n    \"generateTemplateId({ template }) -- template must be defined\"\n  )\n  invariant(\n    typeof template === \"object\",\n    \"generateTemplateId({ template }) -- template must be an object\"\n  )\n  invariant(\n    typeof template.f_type === \"InteractionTemplate\",\n    \"generateTemplateId({ template }) -- template object must be an InteractionTemplate\"\n  )\n\n  template = normalizeInteractionTemplate(template)\n\n  switch (template.f_version) {\n    case \"1.0.0\":\n      const templateData = template.data\n\n      const messages = await Promise.all(\n        Object.keys(templateData.messages).map(async messageKey => [\n          await genHash(messageKey),\n          await Promise.all(\n            Object.keys(templateData.messages?.[messageKey]?.i18n).map(\n              async i18nkeylanguage => [\n                await genHash(i18nkeylanguage),\n                await genHash(\n                  templateData.messages?.[messageKey]?.i18n?.[i18nkeylanguage]\n                ),\n              ]\n            )\n          ),\n        ])\n      )\n\n      const dependencies = await Promise.all(\n        Object.keys(templateData?.dependencies).map(\n          async dependencyAddressPlaceholder => [\n            await genHash(dependencyAddressPlaceholder),\n            await Promise.all(\n              Object.keys(\n                templateData?.dependencies?.[dependencyAddressPlaceholder]\n              ).map(async dependencyContract => [\n                await genHash(dependencyContract),\n                await Promise.all(\n                  Object.keys(\n                    templateData?.dependencies?.[\n                      dependencyAddressPlaceholder\n                    ]?.[dependencyContract]\n                  ).map(async dependencyContractNetwork => [\n                    await genHash(dependencyContractNetwork),\n                    [\n                      await genHash(\n                        templateData?.dependencies?.[\n                          dependencyAddressPlaceholder\n                        ]?.[dependencyContract]?.[dependencyContractNetwork]\n                          .address\n                      ),\n                      await genHash(\n                        templateData?.dependencies?.[\n                          dependencyAddressPlaceholder\n                        ]?.[dependencyContract]?.[dependencyContractNetwork]\n                          .contract\n                      ),\n                      await genHash(\n                        templateData?.dependencies?.[\n                          dependencyAddressPlaceholder\n                        ]?.[dependencyContract]?.[dependencyContractNetwork]\n                          .fq_address\n                      ),\n                      await genHash(\n                        templateData?.dependencies?.[\n                          dependencyAddressPlaceholder\n                        ]?.[dependencyContract]?.[dependencyContractNetwork].pin\n                      ),\n                      await genHash(\n                        String(\n                          templateData?.dependencies?.[\n                            dependencyAddressPlaceholder\n                          ]?.[dependencyContract]?.[dependencyContractNetwork]\n                            .pin_block_height\n                        )\n                      ),\n                    ],\n                  ])\n                ),\n              ])\n            ),\n          ]\n        )\n      )\n\n      const _arguments = await Promise.all(\n        Object.keys(templateData?.[\"arguments\"]).map(async argumentLabel => [\n          await genHash(argumentLabel),\n          [\n            await genHash(\n              String(templateData?.[\"arguments\"]?.[argumentLabel].index)\n            ),\n            await genHash(templateData?.[\"arguments\"]?.[argumentLabel].type),\n            await genHash(\n              templateData?.[\"arguments\"]?.[argumentLabel].balance || \"\"\n            ),\n            await Promise.all(\n              Object.keys(\n                templateData?.[\"arguments\"]?.[argumentLabel].messages\n              ).map(async argumentMessageKey => [\n                await genHash(argumentMessageKey),\n                await Promise.all(\n                  Object.keys(\n                    templateData?.[\"arguments\"]?.[argumentLabel].messages?.[\n                      argumentMessageKey\n                    ].i18n\n                  ).map(async i18nkeylanguage => [\n                    await genHash(i18nkeylanguage),\n                    await genHash(\n                      templateData?.[\"arguments\"]?.[argumentLabel].messages?.[\n                        argumentMessageKey\n                      ].i18n?.[i18nkeylanguage]\n                    ),\n                  ])\n                ),\n              ])\n            ),\n          ],\n        ])\n      )\n\n      const encodedHex = rlpEncode([\n        await genHash(\"InteractionTemplate\"),\n        await genHash(\"1.0.0\"),\n        await genHash(templateData?.type),\n        await genHash(templateData?.interface),\n        messages,\n        await genHash(templateData?.cadence),\n        dependencies,\n        _arguments,\n      ]).toString(\"hex\")\n\n      return genHash(encodedHex)\n\n    default:\n      throw new Error(\"generateTemplateId Error: Unsupported template version\")\n  }\n}\n","import {config, invariant} from \"@onflow/sdk\"\nimport {log, LEVELS} from \"@onflow/util-logger\"\nimport {query} from \"../exec/query.js\"\nimport {generateTemplateId} from \"./generate-template-id.js\"\nimport {normalizeInteractionTemplate} from \"../normalizers/interaction-template/interaction-template.js\"\nimport {getChainId} from \"../utils\"\n\nexport async function getInteractionTemplateAudits(\n  {template, auditors},\n  opts = {}\n) {\n  invariant(\n    template != undefined,\n    \"getInteractionTemplateAudits({ template }) -- template must be defined\"\n  )\n\n  template = normalizeInteractionTemplate(template)\n\n  invariant(\n    template.f_type === \"InteractionTemplate\",\n    \"getInteractionTemplateAudits({ template }) -- template must be an InteractionTemplate\"\n  )\n\n  // Recompute ID to be sure it matches\n  let recomputedTemplateID = await generateTemplateId({template})\n\n  if (recomputedTemplateID !== template.id) {\n    log({\n      title: \"getInteractionTemplateAudits Debug Error\",\n      message: `Could not recompute and match template ID\n                computed: ${recomputedTemplateID}\n                template: ${template.id}\n            `,\n      level: LEVELS.debug,\n    })\n    throw new Error(\n      \"getInteractionTemplateAudits Error: Could not recompute and match template ID\"\n    )\n  }\n\n  switch (template.f_version) {\n    case \"1.0.0\":\n      const _auditors = auditors || (await config().get(\"flow.auditors\"))\n\n      invariant(\n        _auditors,\n        \"getInteractionTemplateAudits Error: Required configuration for 'fcl.auditors' is not set\"\n      )\n      invariant(\n        Array.isArray(_auditors),\n        \"getInteractionTemplateAudits Error: Required configuration for 'fcl.auditors' is not an array\"\n      )\n\n      let FlowInteractionAuditContract = opts.flowInteractionAuditContract\n      if (!FlowInteractionAuditContract) {\n        const fclNetwork = await getChainId()\n        invariant(\n          fclNetwork === \"mainnet\" || fclNetwork === \"testnet\",\n          \"getInteractionTemplateAudits Error: Unable to determine address for FlowInteractionTemplateAudit contract. Set configuration for 'fcl.network' to 'mainnet' or 'testnet'\"\n        )\n        if (fclNetwork === \"mainnet\") {\n          FlowInteractionAuditContract = \"0xfd100e39d50a13e6\"\n        } else {\n          FlowInteractionAuditContract = \"0xf78bfc12d0a786dc\"\n        }\n      }\n\n      const audits = await query({\n        cadence: `\n        import FlowInteractionTemplateAudit from ${FlowInteractionAuditContract}\n        pub fun main(templateId: String, auditors: [Address]): {Address:Bool} {\n          return FlowInteractionTemplateAudit.getHasTemplateBeenAuditedByAuditors(templateId: templateId, auditors: auditors)\n        }\n        `,\n        args: (arg, t) => [\n          arg(recomputedTemplateID, t.String),\n          arg(_auditors, t.Array(t.Address)),\n        ],\n      })\n\n      return audits\n\n    default:\n      throw new Error(\n        \"getInteractionTemplateAudits Error: Unsupported template version\"\n      )\n  }\n}\n","export function generateImport({contractName, address}) {\n  return {contractName, address, contract: \"\"}\n}\n","import {generateImport} from \"./generate-import.js\"\n\nexport function findImports(cadence) {\n  let imports = []\n\n  let importsReg = /import ((\\w|,| )+)* from 0x\\w+/g\n  let fileImports = cadence.match(importsReg) || []\n\n  for (const fileImport of fileImports) {\n    const importLineReg = /import ((\\w+|, |)*) from (0x\\w+)/g\n    const importLine = importLineReg.exec(fileImport)\n\n    const contractsReg = /((?:\\w+)+),?/g\n    const contracts = importLine[1].match(contractsReg) || []\n\n    for (const contract of contracts) {\n      imports.push(\n        generateImport({\n          address: importLine[3],\n          contractName: contract.replace(/,/g, \"\"),\n        })\n      )\n    }\n  }\n\n  return imports\n}\n","import {\n  invariant,\n  block,\n  send,\n  getAccount,\n  atBlockHeight,\n  config,\n  decode,\n} from \"@onflow/sdk\"\nimport {genHash} from \"./utils/hash.js\"\nimport {findImports} from \"./utils/find-imports.js\"\nimport {generateImport} from \"./utils/generate-import.js\"\n\nexport async function generateDependencyPin(\n  {address, contractName, blockHeight},\n  opts = {}\n) {\n  invariant(\n    address != undefined,\n    \"generateDependencyPin({ address }) -- address must be defined\"\n  )\n  invariant(\n    contractName != undefined,\n    \"generateDependencyPin({ contractName }) -- contractName must be defined\"\n  )\n  invariant(\n    blockHeight != undefined,\n    \"generateDependencyPin({ blockHeight }) -- blockHeight must be defined\"\n  )\n  invariant(\n    typeof address === \"string\",\n    \"generateDependencyPin({ address }) -- address must be a string\"\n  )\n  invariant(\n    typeof contractName === \"string\",\n    \"generateDependencyPin({ contractName }) -- contractName must be a string\"\n  )\n  invariant(\n    typeof blockHeight === \"number\",\n    \"generateDependencyPin({ blockHeight }) -- blockHeight must be a number\"\n  )\n\n  let horizon = [generateImport({contractName, address})]\n\n  for (const horizonImport of horizon) {\n    let account = await send(\n      [\n        getAccount(\n          await config().get(horizonImport.address, horizonImport.address)\n        ),\n        atBlockHeight(blockHeight),\n      ],\n      opts\n    ).then(decode)\n\n    horizonImport.contract = account.contracts?.[horizonImport.contractName]\n\n    if (!horizonImport.contract) {\n      console.error(\"Did not find expected contract\", horizonImport, account)\n      throw new Error(\"Did not find expected contract\")\n    }\n\n    let contractImports = findImports(horizonImport.contract)\n\n    horizon.push(...contractImports)\n  }\n\n  let contractHashes = horizon.map(iport => genHash(iport.contract))\n\n  let contractHashesJoined = contractHashes.join(\"\")\n\n  return genHash(contractHashesJoined)\n}\n\nexport async function generateDependencyPinAtLatestSealedBlock(\n  {address, contractName},\n  opts = {}\n) {\n  let latestSealedBlock = await block({sealed: true}, opts)\n  let latestSealedBlockHeight = latestSealedBlock?.height\n\n  return generateDependencyPin(\n    {address, contractName, blockHeight: latestSealedBlockHeight},\n    opts\n  )\n}\n","export function normalizeInteractionTemplateInterface(templateInterface) {\n  if (templateInterface == null) return null\n\n  switch (templateInterface[\"f_version\"]) {\n    case \"1.0.0\":\n      return templateInterface\n\n    default:\n      throw new Error(\n        \"normalizeInteractionTemplateInterface Error: Invalid InteractionTemplateInterface\"\n      )\n  }\n}\n","import {invariant} from \"@onflow/sdk\"\nimport {encode as rlpEncode} from \"@onflow/rlp\"\nimport {genHash} from \"./utils/hash.js\"\nimport {normalizeInteractionTemplateInterface} from \"../normalizers/interaction-template/interaction-template-interface.js\"\n\nexport async function generateTemplateInterfaceId({templateInterface}) {\n  invariant(\n    templateInterface != undefined,\n    \"generateTemplateInterfaceId({ templateInterface }) -- templateInterface must be defined\"\n  )\n  invariant(\n    typeof templateInterface === \"object\",\n    \"generateTemplateInterfaceId({ templateInterface }) -- templateInterface must be an object\"\n  )\n  invariant(\n    typeof templateInterface.f_type === \"InteractionTemplateInterface\",\n    \"generateTemplateInterfaceId({ templateInterface }) -- templateInterface object must be an InteractionTemplate\"\n  )\n\n  templateInterface = normalizeInteractionTemplateInterface(templateInterface)\n\n  switch (templateInterface.f_version) {\n    case \"1.0.0\":\n      const interfaceData = templateInterface.data\n\n      const encodedHex = rlpEncode([\n        await genHash(\"InteractionTemplateInterface\"),\n        await genHash(\"1.0.0\"),\n        await genHash(interfaceData.flip),\n        await Promise.all(\n          Object.keys(interfaceData.arguments).map(async argumentLabel => [\n            await genHash(argumentLabel),\n            await genHash(String(interfaceData.arguments[argumentLabel].index)),\n            await genHash(interfaceData.arguments[argumentLabel].type),\n          ])\n        ),\n      ]).toString(\"hex\")\n\n      return genHash(encodedHex)\n\n    default:\n      throw new Error(\n        \"generateTemplateInterfaceId Error: Unsupported templateInterface version\"\n      )\n  }\n}\n","import {generateDependencyPin} from \"./generate-dependency-pin.js\"\nimport {invariant, block} from \"@onflow/sdk\"\nimport {log, LEVELS} from \"@onflow/util-logger\"\nimport {normalizeInteractionTemplate} from \"../normalizers/interaction-template/interaction-template.js\"\n\nexport async function verifyDependencyPinsSame(\n  {template, blockHeight, network},\n  opts = {}\n) {\n  invariant(\n    template != undefined,\n    \"generateDependencyPin({ template }) -- template must be defined\"\n  )\n  invariant(\n    typeof template === \"object\",\n    \"generateDependencyPin({ template }) -- template must be an object\"\n  )\n  invariant(\n    template.f_type === \"InteractionTemplate\",\n    \"generateDependencyPin({ template }) -- template must be an InteractionTemplate\"\n  )\n\n  template = normalizeInteractionTemplate(template)\n\n  invariant(\n    network != undefined,\n    \"generateDependencyPin({ network }) network must be defined\"\n  )\n  invariant(\n    blockHeight != undefined,\n    \"generateDependencyPin({ blockHeight }) blockHeight must be defined\"\n  )\n  invariant(\n    typeof blockHeight === \"number\",\n    \"generateDependencyPin({ blockHeight }) blockHeight must be a number\"\n  )\n\n  switch (template.f_version) {\n    case \"1.0.0\":\n      let templateDependenciesPlaceholderKeys = Object.keys(\n        template.data.dependencies\n      )\n\n      for (let templateDependencyPlaceholderKey of templateDependenciesPlaceholderKeys) {\n        let templateDependencyPlaceholder =\n          template.data.dependencies[templateDependencyPlaceholderKey]\n\n        let templateDependencyPlaceholderContractNames = Object.keys(\n          templateDependencyPlaceholder\n        )\n\n        for (let templateDependencyPlaceholderContractName of templateDependencyPlaceholderContractNames) {\n          let templateDependencyPlaceholderContractNetworks =\n            template.data.dependencies[templateDependencyPlaceholderKey][\n              templateDependencyPlaceholderContractName\n            ]\n\n          let templateDependency =\n            templateDependencyPlaceholderContractNetworks[network]\n          if (typeof templateDependency === \"undefined\") continue\n\n          let pin = await generateDependencyPin(\n            {\n              address: templateDependency.address,\n              contractName: templateDependency.contract,\n              blockHeight,\n            },\n            opts\n          )\n\n          if (pin !== templateDependency.pin) {\n            log({\n              title: \"verifyDependencyPinsSame Debug Error\",\n              message: `Could not recompute and match dependency pin.\n                                address: ${templateDependency.address} | contract: ${templateDependency.contract}\n                                computed: ${pin}\n                                template: ${templateDependency.pin}\n                            `,\n              level: LEVELS.debug,\n            })\n            return false\n          }\n        }\n      }\n\n      return true\n\n    default:\n      throw new Error(\n        \"verifyDependencyPinsSame Error: Unsupported template version\"\n      )\n  }\n}\n\nexport async function verifyDependencyPinsSameAtLatestSealedBlock(\n  {template, network},\n  opts = {}\n) {\n  let latestSealedBlock = await block({sealed: true})\n  let latestSealedBlockHeight = latestSealedBlock?.height\n\n  return verifyDependencyPinsSame(\n    {template, network, blockHeight: latestSealedBlockHeight},\n    opts\n  )\n}\n","import {invariant} from \"@onflow/sdk\"\n\nexport function getTemplateMessage({\n  localization = \"en-US\",\n  messageKey,\n  template,\n}) {\n  invariant(\n    messageKey,\n    \"getTemplateMessage({ messageKey }) -- messageKey must be defined\"\n  )\n  invariant(\n    typeof messageKey === \"string\",\n    \"getTemplateMessage({ messageKey }) -- messageKey must be a string\"\n  )\n\n  invariant(\n    localization,\n    \"getTemplateMessage({ localization }) -- localization must be defined\"\n  )\n  invariant(\n    typeof localization === \"string\",\n    \"getTemplateMessage({ localization }) -- localization must be a string\"\n  )\n\n  invariant(\n    template != undefined,\n    \"getTemplateMessage({ template }) -- template must be defined\"\n  )\n  invariant(\n    typeof template === \"object\",\n    \"getTemplateMessage({ template }) -- template must be an object\"\n  )\n  invariant(\n    typeof template.f_type === \"InteractionTemplate\",\n    \"getTemplateMessage({ template }) -- template object must be an InteractionTemplate\"\n  )\n\n  const messages = template?.data?.messages\n\n  return messages?.[messageKey]?.i18n?.[localization]\n}\n","import {invariant} from \"@onflow/sdk\"\n\nexport function getTemplateArgumentMessage({\n  localization = \"en-US\",\n  argumentLabel,\n  messageKey,\n  template,\n}) {\n  invariant(\n    messageKey,\n    \"getTemplateArgumentMessage({ messageKey }) -- messageKey must be defined\"\n  )\n  invariant(\n    typeof messageKey === \"string\",\n    \"getTemplateArgumentMessage({ messageKey }) -- messageKey must be a string\"\n  )\n\n  invariant(\n    argumentLabel,\n    \"getTemplateArgumentMessage({ argumentLabel }) -- argumentLabel must be defined\"\n  )\n  invariant(\n    typeof messageKey === \"string\",\n    \"getTemplateArgumentMessage({ argumentLabel }) -- argumentLabel must be a string\"\n  )\n\n  invariant(\n    localization,\n    \"getTemplateArgumentMessage({ localization }) -- localization must be defined\"\n  )\n  invariant(\n    typeof localization === \"string\",\n    \"getTemplateArgumentMessage({ localization }) -- localization must be a string\"\n  )\n\n  invariant(\n    template != undefined,\n    \"getTemplateArgumentMessage({ template }) -- template must be defined\"\n  )\n  invariant(\n    typeof template === \"object\",\n    \"getTemplateArgumentMessage({ template }) -- template must be an object\"\n  )\n  invariant(\n    typeof template.f_type === \"InteractionTemplate\",\n    \"getTemplateArgumentMessage({ template }) -- template object must be an InteractionTemplate\"\n  )\n\n  const args = template?.data?.arguments\n\n  return args?.[argumentLabel]?.messages?.[messageKey]?.i18n?.[localization]\n}\n","import \"./default-config\"\nexport {VERSION} from \"./VERSION\"\nexport {query} from \"./exec/query\"\nexport {mutate} from \"./exec/mutate\"\nexport {verifyUserSignatures} from \"./exec/verify\"\nexport {serialize} from \"./serialize\"\nexport {transaction as tx} from \"./transaction\"\nexport {events} from \"./events\"\nexport {pluginRegistry} from \"./current-user/exec-service/plugins\"\n\nimport {currentUser} from \"./current-user\"\nexport {currentUser}\n\nimport {discovery} from \"./discovery\"\nexport {discovery}\n\nexport const authenticate = (opts = {}) => currentUser().authenticate(opts)\nexport const unauthenticate = () => currentUser().unauthenticate()\nexport const reauthenticate = (opts = {}) => {\n  currentUser().unauthenticate()\n  return currentUser().authenticate(opts)\n}\nexport const signUp = (opts = {}) => currentUser().authenticate(opts)\nexport const logIn = (opts = {}) => currentUser().authenticate(opts)\n\nexport const getStrategyData = (opts = {}) => currentUser().getStrategyData(opts)\n\nexport const authz = currentUser().authorization\n\nimport * as types from \"@onflow/types\"\nexport const t = types\n\nimport * as WalletUtils from \"./wallet-utils\"\nexport {WalletUtils}\n\nimport * as AppUtils from \"./app-utils\"\nexport {AppUtils}\n\nimport * as InteractionTemplateUtils from \"./interaction-template-utils\"\nexport {InteractionTemplateUtils}\n\nexport {getChainId} from \"./utils\"\n\nexport {TestUtils} from \"@onflow/sdk\"\nexport {config} from \"@onflow/config\"\nexport {send} from \"@onflow/sdk\"\nexport {decode} from \"@onflow/sdk\"\nexport {account} from \"@onflow/sdk\"\nexport {block} from \"@onflow/sdk\"\nexport {isOk, isBad, why, pipe, build} from \"@onflow/sdk\"\nexport {withPrefix, sansPrefix, display} from \"@onflow/util-address\"\nexport {template as cadence} from \"@onflow/util-template\"\nexport {template as cdc} from \"@onflow/util-template\"\nexport {createSignableVoucher} from \"@onflow/sdk\"\nexport {voucherIntercept} from \"@onflow/sdk\"\nexport {voucherToTxId} from \"@onflow/sdk\"\n\n// builders\nexport {transaction} from \"@onflow/sdk\"\nexport {script} from \"@onflow/sdk\"\nexport {ping} from \"@onflow/sdk\"\nexport {atBlockHeight} from \"@onflow/sdk\"\nexport {atBlockId} from \"@onflow/sdk\"\nexport {getAccount} from \"@onflow/sdk\"\nexport {getEvents} from \"@onflow/sdk\"\nexport {getEventsAtBlockHeightRange} from \"@onflow/sdk\"\nexport {getEventsAtBlockIds} from \"@onflow/sdk\"\nexport {getBlock} from \"@onflow/sdk\"\nexport {getBlockHeader} from \"@onflow/sdk\"\nexport {getCollection} from \"@onflow/sdk\"\nexport {getTransactionStatus} from \"@onflow/sdk\"\nexport {getTransaction} from \"@onflow/sdk\"\nexport {getNetworkParameters} from \"@onflow/sdk\"\nexport {authorizations, authorization} from \"@onflow/sdk\"\nexport {args, arg} from \"@onflow/sdk\"\nexport {proposer} from \"@onflow/sdk\"\nexport {payer} from \"@onflow/sdk\"\nexport {limit} from \"@onflow/sdk\"\nexport {ref} from \"@onflow/sdk\"\nexport {params, param} from \"@onflow/sdk\"\nexport {validator} from \"@onflow/sdk\"\nexport {invariant} from \"@onflow/sdk\"\n"],"names":["getChainIdFromAccessNode","sdk","send","getNetworkParameters","then","decode","response","chainId","setChainIdDefault","network","config","put","getChainId","get","log","deprecate","pkg","subject","message","transition","invariant","isServerSide","window","SESSION_STORAGE","can","key","console","value","configLens","regex","Object","where","entries","map","replace","fromEntries","VERSION","is","type","d","isRequired","isObject","isString","isFunc","isNumber","normalizeArgs","ax","arg","t","httpDocumentResolver","url","fetchTransport","res","Error","ok","json","document","DOCUMENT_RESOLVERS","Map","retrieve","documentResolversFromConfig","keys","resolverFromConfig","resolverProtocol","set","urlParts","exec","protocol","resolver","normalizeInteractionTemplate","template","deriveCadenceByNetwork","undefined","f_type","f_version","networkDependencies","data","dependencies","dependencyPlaceholder","dependencyNetworkContracts","values","length","dependencyContract","dependencyContractForNetwork","address","reduce","cadence","placeholder","RegExp","isAndroid","navigator","test","userAgent","isSmallIOS","isLargeIOS","isIOS","isMobile","deriveDependencies","derivedDependencies","dependencyPlaceholderKeys","dependencyPlaceholderKey","dependencyPlaceholderContractsKeys","dependencyPlaceholderContract","dependency","withPrefix","prepTemplateOpts","opts","pre","preMutate","preQuery","query","overload","script","args","limit","fetchServices","servicesURL","code","URL","searchParams","append","fetch","method","headers","resp","Array","isArray","services","authorizations","service","push","keyId","provider","id","mergeServices","sx1","sx2","SERVICE_PRAGMA","f_vsn","IDENTITY_PRAGMA","USER_PRAGMA","POLLING_RESPONSE_PRAGMA","COMPOSITE_SIGNATURE_PRAGMA","normalizeAuthn","uid","endpoint","authn","pid","addr","name","icon","normalizeAuthz","identity","params","normalizePreAuthz","normalizeFrame","old","normalizeBackChannelRpc","normalizeOpenId","normalizeUserSignature","normalizeLocalView","normalizeAccountProof","normalizeAuthnRefresh","serviceNormalizers","authz","frame","normalizeService","normalized","error","deriveCompositeId","rlp","encode","toString","normalizeData","paddr","findService","find","buildUser","hks","cid","loggedIn","expiresAt","expires","serviceOfType","serviceEndpoint","location","origin","fetchService","body","JSON","stringify","normalizePollingResponse","status","reason","compositeSignature","updates","authorizationUpdates","local","OPTIONS","serviceMethod","poll","canContinue","Promise","r","setTimeout","FRAME","FRAME_STYLES","renderFrame","src","getElementById","$frame","createElement","allow","frameBorder","style","cssText","unmount","remove","contentWindow","POP","popup","previousUrl","popupWindow","windowName","win","w","h","y","top","outerHeight","screenY","x","outerWidth","screenX","open","renderPop","closed","focus","close","tab","renderTab","VIEWS","execLocal","execHttpPost","fclVersion","serviceResponse","CLOSE_EVENT","READY_EVENT","RESPONSE_EVENT","_","e","toLowerCase","IGNORE","Set","was","want","warn","buildMessageHandler","onReady","onResponse","onMessage","has","noop","onClose","handler","addEventListener","removeEventListener","msg","postMessage","parse","execIframeRPC","resolve","reject","includeOlderJsonRpcCall","deprecated","jsonrpc","result","pop","$pop","timer","setInterval","clearInterval","execPopRPC","redir","$tab","execTabRPC","extension","execExtRPC","CORE_STRATEGIES","supportedPlugins","supportedServicePlugins","validateDiscoveryPlugin","servicePlugin","serviceStrategy","ds","discoveryServices","ServiceRegistry","strategies","add","includes","setServices","title","level","LEVELS","getServices","getStrategy","getStrategies","freeze","validatePlugins","plugins","pluginsArray","p","PluginRegistry","pluginsMap","getPlugins","serviceRegistry","pluginRegistry","execStrategy","strategy","execStrategyData","client","hostname","fclLibrary","execConfig","app","execService","normalizeCompositeSignature","sansPrefix","signature","sig","makeDiscoveryServices","extensionServices","fcl_extensions","getDiscoveryService","discoveryAuthnInclude","first","discoveryWalletMethod","types","Boolean","include","clientServices","supportedStrategies","SERVICE_ACTOR_KEYS","AUTHN","RESULTS","SNAPSHOT","UPDATED","UPDATE_RESULTS","fact","fetchServicesFromDiscovery","results","HANDLERS","INIT","ctx","_letter","merge","broadcast","all","SUBSCRIBE","letter","subscribe","from","UNSUBSCRIBE","unsubscribe","reply","_HANDLERS","spawnProviders","spawn","cb","subscriber","snapshot","snapshoter","update","discovery","isFn","NAME","SET_CURRENT_USER","DEL_CURRENT_USER","DATA","getStoredUser","storage","fallback","stored","removeItem","user","notExpired","spawnCurrentUser","Date","now","getAccountProofData","accountProofDataResolver","accountProofData","appIdentifier","nonce","makeConfig","authenticate","is_installed","requires_install","href","install_link","discoveryService","refreshService","getStrategyData","unauthenticate","normalizePreAuthzResponse","proposer","payer","authorization","resolvePreAuthz","axs","az","role","tempId","join","signingFunction","signable","authorizer","account","preSignable","preAuthz","windowRef","sequenceNum","callback","EXIT","self","receive","tag","expectReply","timeout","resolveArgument","Address","makeSignable","signUserMessage","signingService","compSigs","currentUser","mutate","txid","transaction","onMessageFromFCL","messageType","buildData","interaction","internal","sendMsgToFCL","parent","opener","ready","approve","decline","redirect","CompositeSignature","Number","rightPaddedHexBuffer","pad","Buffer","padEnd","leftPaddedHexBuffer","padStart","addressBuffer","nonceBuffer","encodeAccountProof","includeDomainTag","ACCOUNT_PROOF_DOMAIN_TAG","concat","rlpEncode","injectExtService","ACCOUNT_PROOF","USER_SIGNATURE","validateArgs","signatures","every","i","arr","cs","getVerifySignaturesScript","verifyFunction","fclCryptoContract","verifyAccountProof","signaturesArr","keyIndices","el","String","Int","verifyUserSignatures","verify","serialize","defaultResolve","resolveFunction","pipe","createSignableVoucher","RATE","POLL","fetchTxStatus","transactionId","fclSend","getTransactionStatus","isExpired","tx","isSealed","isExecuted","isFinalized","isPending","isUnknown","isDiff","cur","next","sendSelf","fatalError","scoped","spawnTransaction","once","predicate","innerOnce","suppress","unsub","txStatus","statusCode","errorMessage","onceFinalized","onceExecuted","onceSealed","TICK","HIGH_WATER_MARK","scheduleTick","hasSubs","hwm","block","height","getEventsAtBlockHeightRange","clearTimeout","spawnEvents","events","copy","I","O","o","oi","ii","copy_1","defineProperty","exports","_copy","_interopRequireDefault","require$$0","obj","__esModule","chi","_ref","A","C","_x","xy","x1","x2","_default","ROUND_CONSTANTS","Uint32Array","_roundConstants","iota","roundIndex","PI_SHUFFLES","RHO_OFFSETS","_piShuffles","_rhoOffsets","require$$1","require$$2","rhoPi","W","H","L","Wi","ri","j","theta","D","x20","x21","x22","x23","x24","_chi","_iota","_rhoPi","_theta","require$$3","permute","fill","_buffer","_permute","xorWords","readWords","Sponge","_this","capacity","padding","keccak","stateSize","blockSize","queueSize","queueOffset","state","queue","allocUnsafe","absorb","buffer","squeeze","options","arguments","output","offset","slice","reset","SHAKE","SHA3Hash","SHA3","Keccak","_sponge","createHash","allowedSizes","defaultSize","Hash","size","constructor","sponge","input","encoding","isBuffer","TypeError","digest","formatOrOptions","format","genHash","utf8String","sha","generateTemplateId","templateData","messages","messageKey","i18n","i18nkeylanguage","dependencyAddressPlaceholder","dependencyContractNetwork","contract","fq_address","pin","pin_block_height","argumentLabel","index","balance","argumentMessageKey","_arguments","encodedHex","getInteractionTemplateAudits","auditors","recomputedTemplateID","debug","_auditors","FlowInteractionAuditContract","flowInteractionAuditContract","fclNetwork","audits","generateImport","contractName","findImports","imports","importsReg","fileImports","match","fileImport","importLineReg","importLine","contractsReg","contracts","generateDependencyPin","blockHeight","horizon","horizonImport","getAccount","atBlockHeight","contractImports","contractHashes","iport","contractHashesJoined","generateDependencyPinAtLatestSealedBlock","sealed","latestSealedBlock","latestSealedBlockHeight","normalizeInteractionTemplateInterface","templateInterface","generateTemplateInterfaceId","interfaceData","flip","verifyDependencyPinsSame","templateDependenciesPlaceholderKeys","templateDependencyPlaceholderKey","templateDependencyPlaceholder","templateDependencyPlaceholderContractNames","templateDependencyPlaceholderContractName","templateDependencyPlaceholderContractNetworks","templateDependency","verifyDependencyPinsSameAtLatestSealedBlock","getTemplateMessage","localization","getTemplateArgumentMessage","reauthenticate","signUp","logIn"],"mappings":"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"}