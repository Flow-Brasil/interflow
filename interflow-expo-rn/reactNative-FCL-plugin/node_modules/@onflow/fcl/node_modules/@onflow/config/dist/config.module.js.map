{"version":3,"file":"config.module.js","sources":["../../util-invariant/src/index.js","../../util-logger/src/util-logger.js","../utils/utils.js","../src/config.js"],"sourcesContent":["/**\n * Asserts fact is true, otherwise throw an error with invariant message\n * @param {boolean} fact\n * @param {string} msg\n * @param {Array} rest\n * @returns {void}\n */\nexport function invariant(fact, msg, ...rest) {\n  if (!fact) {\n    const error = new Error(`INVARIANT ${msg}`)\n    error.stack = error.stack\n      .split(\"\\n\")\n      .filter(d => !/at invariant/.test(d))\n      .join(\"\\n\")\n    console.error(\"\\n\\n---\\n\\n\", error, \"\\n\\n\", ...rest, \"\\n\\n---\\n\\n\")\n    throw error\n  }\n}\n","import {config} from \"@onflow/config\"\n\n/**\n * The levels of the logger\n * \n * @typedef {Object} LEVELS\n * @property {number} debug - The debug level\n * @property {number} info - The info level\n * @property {number} log - The log level\n * @property {number} warn - The warn level\n * @property {number} error - The error level\n * \n */\nexport const LEVELS = Object.freeze({\n  debug: 5,\n  info: 4,\n  log: 3,\n  warn: 2,\n  error: 1,\n})\n\n/**\n * Builds a message formatted for the logger\n * \n * @param {Object} options - The options for the log\n * @param {string} options.title - The title of the log\n * @param {string} options.message - The message of the log\n * @returns {Array<string>} - The message formatted for the logger\n * \n * @example\n * buildLoggerMessageArgs({ title: \"My Title\", message: \"My Message\" })\n */\nconst buildLoggerMessageArgs = ({title, message}) => {\n  return [\n    `\n    %c${title}\n    ============================\n\n    ${message}\n\n    ============================\n    `\n      .replace(/\\n[^\\S\\r\\n]+/g, \"\\n\")\n      .trim(),\n    ,\n    \"font-weight:bold;font-family:monospace;\",\n  ]\n}\n\n/**\n * Logs messages based on the level of the message and the level set in the config\n * \n * @param {Object} options - The options for the log\n * @param {string} options.title - The title of the log\n * @param {string} options.message - The message of the log\n * @param {number} options.level - The level of the log\n * @param {boolean} options.always - Whether to always show the log\n * @returns {Promise<void>}\n * \n * @example\n * log({ title: \"My Title\", message: \"My Message\", level: LEVELS.warn, always: false })\n * \n */\nexport const log = async ({title, message, level, always = false}) => {\n  const configLoggerLevel = await config.get(\"logger.level\", LEVELS.warn)\n\n  // If config level is below message level then don't show it\n  if (!always && configLoggerLevel < level) return\n\n  const loggerMessageArgs = buildLoggerMessageArgs({title, message})\n\n  switch (level) {\n    case LEVELS.debug:\n      console.debug(...loggerMessageArgs)\n      break\n    case LEVELS.info:\n      console.info(...loggerMessageArgs)\n      break\n    case LEVELS.warn:\n      console.warn(...loggerMessageArgs)\n      break\n    case LEVELS.error:\n      console.error(...loggerMessageArgs)\n      break\n    default:\n      console.log(...loggerMessageArgs)\n  }\n}\n\n/**\n * Logs a deprecation notice\n * \n * @param {Object} options - The options for the log\n * @param {string} options.pkg - The package that is being deprecated\n * @param {string} options.subject - The subject of the deprecation\n * @param {string} options.transition - The transition path for the deprecation\n * @param {number} options.level - The level of the log\n * @param {string} options.message - The message of the log\n * @param {Function} options.callback - A callback to run after the log\n * @returns {Promise<void>}\n * \n * @example\n * log.deprecate({ pkg: \"@onflow/fcl\", subject: \"Some item\", transition: \"https://github.com/onflow/flow-js-sdk\", message: \"Descriptive message\", level: LEVELS.warn, callback: () => {} })\n * \n */\nlog.deprecate = ({\n  pkg,\n  subject,\n  transition,\n  level = LEVELS.warn,\n  message = \"\",\n  callback = null,\n}) => {\n  const capitalizeFirstLetter = string => {\n    return string.charAt(0).toUpperCase() + string.slice(1)\n  }\n\n  const logMessage = () =>\n    log({\n      title: `${pkg ? pkg + \" \" : \"\"}Deprecation Notice`,\n      message: `\n      ${\n        subject\n          ? `${capitalizeFirstLetter(\n              subject\n            )} is deprecated and will cease to work in future releases${\n              pkg ? \" of \" + pkg : \"\"\n            }.`\n          : \"\"\n      }${message ? \"\\n\" + message : \"\"}${\n        transition\n          ? `\\nYou can learn more (including a guide on common transition paths) here: ${transition}`\n          : \"\"\n      }\n    `.trim(),\n      level,\n    })\n\n  if (typeof callback === \"function\") {\n    return async (...args) => {\n      await logMessage()\n      return await callback(...args)\n    }\n  }\n  return logMessage()\n}\n","const pipe =\n  (...funcs) =>\n  v => {\n    return funcs.reduce((res, func) => {\n      return func(res)\n    }, v)\n  }\n\n/***\n * Merge multiple functions returning objects into one object.\n * @param {...function(*): Object} funcs\n * @return {Object}\n */\nconst mergePipe =\n  (...funcs) =>\n  v => {\n    return funcs.reduce((res, func) => {\n      return {...res, ...func(v)}\n    }, {})\n  }\n\n/**\n * Object check.\n * @param value\n * @returns {boolean}\n */\nconst isObject = value =>\n  value && typeof value === \"object\" && !Array.isArray(value)\n\n/**\n * Deep merge multiple objects.\n * @param {Object} target\n * @param {...Object[]} sources\n * @returns {Object}\n */\nconst mergeDeep = (target, ...sources) => {\n  if (!sources.length) return target\n  const source = sources.shift()\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) Object.assign(target, {[key]: {}})\n        mergeDeep(target[key], source[key])\n      } else {\n        Object.assign(target, {[key]: source[key]})\n      }\n    }\n  }\n\n  return mergeDeep(target, ...sources)\n}\n\n/**\n * Support if/then/else behavior in a function way.\n * @param{function(Object): boolean} testFn\n * @param{function(Object): *} posCond - Function to run if testFn is true\n * @param{function(Object): *} negCond - Function to run it testFn is false\n * @returns {function(*): *}\n */\nexport const ifElse = (testFn, posCond, negCond) => obj =>\n  testFn(obj) ? posCond(obj) : negCond(obj)\n\n/**\n * Deep merge multiple Flow JSON.\n * @param {Object|Object[]} value\n * @returns {Object}\n */\nconst mergeFlowJSONs = value =>\n  Array.isArray(value) ? mergeDeep({}, ...value) : value\n\n/**\n * Filter out contracts section of flow.json.\n * @param {Object|Object[]} obj\n * @returns {Object}\n */\nconst filterContracts = obj => (obj.contracts ? obj.contracts : {})\n\n/**\n * Gathers contract addresses by network\n * @param {string} network emulator, testnet, mainnet\n * @returns {Object} { \"HelloWorld\": \"0x123\" }\n */\nconst mapContractAliasesToNetworkAddress = network => contracts => {\n  return Object.entries(contracts).reduce((c, [key, value]) => {\n    const networkContractAlias = value?.aliases?.[network]\n    if (networkContractAlias) {\n      c[key] = networkContractAlias\n    }\n\n    return c\n  }, {})\n}\n\nconst mapDeploymentsToNetworkAddress =\n  network =>\n  ({deployments = {}, accounts = {}}) => {\n    const networkDeployment = deployments?.[network]\n    if (!networkDeployment) return {}\n\n    return Object.entries(networkDeployment).reduce((c, [key, value]) => {\n      // Resolve account address\n      const accountAddress = accounts[key]?.address\n      if (!accountAddress) return c\n\n      // Create an object assigning the address to the contract name.\n      return value.reduce((c, contract) => {\n        return {...c, [contract]: accountAddress}\n      }, {})\n    }, {})\n  }\n\n/**\n * Take in flow.json files and return contract to address mapping by network\n * @param {Object|Object[]} jsons\n * @param {string} network emulator, testnet, mainnet\n * @returns {Object} { \"HelloWorld\": \"0x123\" }\n */\nexport const getContracts = (jsons, network) => {\n  return pipe(\n    mergeFlowJSONs,\n    mergePipe(\n      mapDeploymentsToNetworkAddress(network),\n      pipe(filterContracts, mapContractAliasesToNetworkAddress(network))\n    )\n  )(jsons)\n}\n\n/**\n * Checks flow.json file for private keys\n * @param {Object} flowJSON\n * @returns {boolean}\n */\nconst hasPrivateKeys = flowJSON => {\n  return Object.entries(flowJSON?.accounts).reduce(\n    (hasPrivateKey, [key, value]) => {\n      if (hasPrivateKey) return true\n      return value?.hasOwnProperty(\"key\") && !value?.key?.startsWith(\"$\")\n    },\n    false\n  )\n}\n\n/**\n * Take in flow.json or array of flow.json files and checks for private keys\n * @param {Object|Object[]} value\n * @returns {boolean}\n */\nexport const anyHasPrivateKeys = value => {\n  if (isObject(value)) return hasPrivateKeys(value)\n  return value.some(hasPrivateKeys)\n}\n\n/**\n * Format network to always be 'emulator', 'testnet', or 'mainnet'\n * @param {string} network 'local', 'emulator', 'testnet', 'mainnet'\n * @returns {string} 'emulator', 'testnet', 'mainnet'\n */\nexport const cleanNetwork = network =>\n  network?.toLowerCase() === \"local\" ? \"emulator\" : network?.toLowerCase()\n","import {\n  spawn,\n  send,\n  subscriber,\n  SUBSCRIBE,\n  UNSUBSCRIBE,\n} from \"@onflow/util-actor\"\nimport * as logger from \"@onflow/util-logger\"\nimport {invariant} from \"@onflow/util-invariant\"\nimport {getContracts, cleanNetwork, anyHasPrivateKeys} from \"../utils/utils\"\n\nconst NAME = \"config\"\nconst PUT = \"PUT_CONFIG\"\nconst GET = \"GET_CONFIG\"\nconst GET_ALL = \"GET_ALL_CONFIG\"\nconst UPDATE = \"UPDATE_CONFIG\"\nconst DELETE = \"DELETE_CONFIG\"\nconst CLEAR = \"CLEAR_CONFIG\"\nconst WHERE = \"WHERE_CONFIG\"\nconst UPDATED = \"CONFIG/UPDATED\"\n\nconst identity = v => v\n\nconst HANDLERS = {\n  [PUT]: (ctx, _letter, {key, value}) => {\n    if (key == null) throw new Error(\"Missing 'key' for config/put.\")\n    ctx.put(key, value)\n    ctx.broadcast(UPDATED, {...ctx.all()})\n  },\n  [GET]: (ctx, letter, {key, fallback}) => {\n    if (key == null) throw new Error(\"Missing 'key' for config/get\")\n    letter.reply(ctx.get(key, fallback))\n  },\n  [GET_ALL]: (ctx, letter) => {\n    letter.reply({...ctx.all()})\n  },\n  [UPDATE]: (ctx, letter, {key, fn}) => {\n    if (key == null) throw new Error(\"Missing 'key' for config/update\")\n    ctx.update(key, fn || identity)\n    ctx.broadcast(UPDATED, {...ctx.all()})\n  },\n  [DELETE]: (ctx, letter, {key}) => {\n    if (key == null) throw new Error(\"Missing 'key' for config/delete\")\n    ctx.delete(key)\n    ctx.broadcast(UPDATED, {...ctx.all()})\n  },\n  [CLEAR]: (ctx, letter) => {\n    let keys = Object.keys(ctx.all())\n    for (let key of keys) ctx.delete(key)\n    ctx.broadcast(UPDATED, {...ctx.all()})\n  },\n  [WHERE]: (ctx, letter, {pattern}) => {\n    if (pattern == null) throw new Error(\"Missing 'pattern' for config/where\")\n    letter.reply(ctx.where(pattern))\n  },\n  [SUBSCRIBE]: (ctx, letter) => {\n    ctx.subscribe(letter.from)\n    ctx.send(letter.from, UPDATED, {...ctx.all()})\n  },\n  [UNSUBSCRIBE]: (ctx, letter) => {\n    ctx.unsubscribe(letter.from)\n  },\n}\n\nspawn(HANDLERS, NAME)\n\nfunction put(key, value) {\n  send(NAME, PUT, {key, value})\n  return config()\n}\n\nfunction get(key, fallback) {\n  return send(NAME, GET, {key, fallback}, {expectReply: true, timeout: 10})\n}\n\nasync function first(wants = [], fallback) {\n  if (!wants.length) return fallback\n  const [head, ...rest] = wants\n  const ret = await get(head)\n  if (ret == null) return first(rest, fallback)\n  return ret\n}\n\nfunction all() {\n  return send(NAME, GET_ALL, null, {expectReply: true, timeout: 10})\n}\n\nfunction update(key, fn = identity) {\n  send(NAME, UPDATE, {key, fn})\n  return config()\n}\n\nfunction _delete(key) {\n  send(NAME, DELETE, {key})\n  return config()\n}\n\nfunction where(pattern) {\n  return send(NAME, WHERE, {pattern}, {expectReply: true, timeout: 10})\n}\n\nfunction subscribe(callback) {\n  return subscriber(NAME, () => spawn(HANDLERS, NAME), callback)\n}\n\nexport function clearConfig() {\n  return send(NAME, CLEAR)\n}\n\nfunction resetConfig(oldConfig) {\n  return clearConfig().then(config(oldConfig))\n}\n\n/**\n * Takes in flow.json or array of flow.json files and creates contract placeholders\n * @param {Object|Object[]} data\n * @returns {void}\n */\nasync function load(data) {\n  const network = await get(\"flow.network\")\n  const cleanedNetwork = cleanNetwork(network)\n  const {flowJSON} = data\n\n  invariant(Boolean(flowJSON), \"config.load -- 'flowJSON' must be defined\")\n\n  invariant(\n    cleanedNetwork,\n    `Flow Network Required -- In order for FCL to load your contracts please define \"flow.network\" to \"emulator\", \"local\", \"testnet\", or \"mainnet\" in your config. See more here: https://developers.flow.com/tools/fcl-js/reference/configure-fcl`\n  )\n\n  if (anyHasPrivateKeys(flowJSON)) {\n    const isEmulator = cleanedNetwork === \"emulator\"\n\n    logger.log({\n      title: \"Private Keys Detected\",\n      message: `Private keys should be stored in a separate flow.json file for security. See more here: https://developers.flow.com/tools/flow-cli/security`,\n      level: isEmulator ? logger.LEVELS.warn : logger.LEVELS.error,\n    })\n\n    if (!isEmulator) return\n  }\n\n  for (const [key, value] of Object.entries(\n    getContracts(flowJSON, cleanedNetwork)\n  )) {\n    const contractConfigKey = `0x${key}`\n    const existingContractConfigKey = await get(contractConfigKey)\n    if (existingContractConfigKey && existingContractConfigKey !== value) {\n      logger.log({\n        title: \"Contract Placeholder Conflict Detected\",\n        message: `A generated contract placeholder from config.load conflicts with a placeholder you've set manually in config have the same name.`,\n        level: logger.LEVELS.warn,\n      })\n    } else {\n      put(contractConfigKey, value)\n    }\n\n    const systemContractConfigKey = `system.contracts.${key}`\n    const systemExistingContractConfigKeyValue = await get(\n      systemContractConfigKey\n    )\n    if (\n      systemExistingContractConfigKeyValue &&\n      systemExistingContractConfigKeyValue !== value\n    ) {\n      logger.log({\n        title: \"Contract Placeholder Conflict Detected\",\n        message: `A generated contract placeholder from config.load conflicts with a placeholder you've set manually in config have the same name.`,\n        level: logger.LEVELS.warn,\n      })\n    } else {\n      put(systemContractConfigKey, value)\n    }\n  }\n}\n\n/**\n * Takes an object of config keys and returns an object with config methods\n *\n * @param {Object} values\n * @returns {Object} config\n * @returns {Function} config.put\n * @returns {Function} config.get\n * @returns {Function} config.all\n * @returns {Function} config.first\n * @returns {Function} config.update\n * @returns {Function} config.delete\n * @returns {Function} config.where\n * @returns {Function} config.subscribe\n * @returns {Function} config.overload\n * @returns {Function} config.load\n *\n * @example\n * import {config} from \"@onflow/fcl\"\n * config({ \"flow.network\": \"testnet\" })\n *\n */\nfunction config(values) {\n  if (values != null && typeof values === \"object\") {\n    Object.keys(values).map(d => put(d, values[d]))\n  }\n\n  return {\n    put,\n    get,\n    all,\n    first,\n    update,\n    delete: _delete,\n    where,\n    subscribe,\n    overload,\n    load,\n  }\n}\n\nconfig.put = put\nconfig.get = get\nconfig.all = all\nconfig.first = first\nconfig.update = update\nconfig.delete = _delete\nconfig.where = where\nconfig.subscribe = subscribe\nconfig.overload = overload\nconfig.load = load\n\nexport {config}\n\nconst noop = v => v\nfunction overload(opts = {}, callback = noop) {\n  return new Promise(async (resolve, reject) => {\n    const oldConfig = await all()\n    try {\n      config(opts)\n      var result = await callback(await all())\n      await resetConfig(oldConfig)\n      resolve(result)\n    } catch (error) {\n      await resetConfig(oldConfig)\n      reject(error)\n    }\n  })\n}\n"],"names":["LEVELS","debug","info","warn","error","buildLoggerMessageArgs","title","message","log","level","always","config","configLoggerLevel","get","pkg","transition","callback","capitalizeFirstLetter","string","logMessage","subject","stack","rest","pipe","funcs","v","reduce","res","func","mergePipe","isObject","value","Array","isArray","mergeDeep","target","sources","length","source","shift","key","Object","assign","mergeFlowJSONs","filterContracts","obj","contracts","mapContractAliasesToNetworkAddress","network","entries","c","networkContractAlias","aliases","mapDeploymentsToNetworkAddress","deployments","accounts","networkDeployment","accountAddress","address","contract","getContracts","jsons","hasPrivateKeys","flowJSON","hasPrivateKey","hasOwnProperty","startsWith","anyHasPrivateKeys","some","cleanNetwork","toLowerCase","NAME","PUT","GET","GET_ALL","UPDATE","DELETE","CLEAR","WHERE","UPDATED","identity","HANDLERS","ctx","_letter","Error","put","broadcast","all","letter","fallback","reply","fn","update","keys","pattern","where","SUBSCRIBE","subscribe","from","send","UNSUBSCRIBE","unsubscribe","spawn","expectReply","timeout","first","wants","head","ret","_delete","subscriber","clearConfig","resetConfig","oldConfig","then","load","data","cleanedNetwork","invariant","Boolean","isEmulator","logger","contractConfigKey","existingContractConfigKey","systemContractConfigKey","systemExistingContractConfigKeyValue","values","map","d","overload","noop","opts","Promise","resolve","reject","result"],"mappings":"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"}